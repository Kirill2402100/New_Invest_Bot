# Lp_alert_bot.py
"""
Telegram-–±–æ—Ç –¥–ª—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ LP (EURC-USDC)
---------------------------------------------------

* –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç —Ç—è–Ω–µ—Ç 30-–º–∏–Ω —Å–≤–µ—á–∏ EURC-USD —Å Coinbase.
* –°—á–∏—Ç–∞–µ—Ç 24-—á–∞—Å–æ–≤–æ–π ATR (48 —Å–≤–µ—á–µ–π) –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–∞ –∏–∑ —É–∑–∫–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ¬±0,10 % –≤ –±–ª–∏–∂–∞–π—à–∏–µ 6 —á–∞—Å–æ–≤.
* –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (P_exit) –≤—ã–¥–∞—ë—Ç —Ç—Ä–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
    ‚Äì ¬´—É–∑–∫–∏–π¬ª   ¬±0,10 %  ‚âà150 % APY  (—Ä–∏—Å–∫ <10 %)
    ‚Äì ¬´—Å—Ä–µ–¥–Ω–∏–π¬ª ¬±0,17 %  ‚âà90 %  APY  (10‚Äì25 %)
    ‚Äì ¬´—à–∏—Ä–æ–∫–∏–π¬ª ¬±0,30 %  ‚âà50 %  APY  (‚â•25 %)
  –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–π—Ç–∏/–∑–∞—Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ œÉ >0,50 % –∏–ª–∏ P_exit >60 %.
* –®–ª—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.

–†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ Railway
=========================
1. –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤–∞—à–µ–≥–æ Railway-–ø—Ä–æ–µ–∫—Ç–∞.
2. –í *Variables* –∑–∞–¥–∞–π—Ç–µ –º–∏–Ω–∏–º—É–º:

   BOT_TOKEN       ‚Äì —Ç–æ–∫–µ–Ω –∏–∑ @BotFather
   CHAT_ID         ‚Äì id –ª–∏—á–∫–∏ –∏–ª–∏ –≥—Ä—É–ø–ø—ã (–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ getUpdates)

   (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   PAIR            ‚Äì "EURC-USD"
   GRANULARITY     ‚Äì 1800  # —Å–µ–∫—É–Ω–¥
   HORIZON_HRS     ‚Äì 6
   ATR_WINDOWS     ‚Äì 48
   APY_CONSTANT    ‚Äì 0.15  # –¥–∞—ë—Ç 150 % –ø—Ä–∏ ¬±0,10 %
3. Type = Python, Start Cmd = `python lp_alert_bot.py`

–ì–æ—Ç–æ–≤–æ ‚Äì Railway –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –±–æ—Ç –Ω–∞—á–Ω—ë—Ç —Å–ª–∞—Ç—å –∞–ª—ë—Ä—Ç—ã.
"""

import os
import time
from math import erf, sqrt
from statistics import mean
from datetime import datetime, timezone

import requests

###############################################################################
#‚ÄÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
###############################################################################
PAIR         = os.getenv("PAIR", "EURC-USD")
GRANULARITY  = int(os.getenv("GRANULARITY", "1800"))   # 30-–º–∏–Ω —Å–≤–µ—á–∏
ATR_WINDOWS  = int(os.getenv("ATR_WINDOWS", "48"))      # 24 —á
HORIZON_HRS  = float(os.getenv("HORIZON_HRS", "6"))     # –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–µ –æ–∫–Ω–æ
APY_K        = float(os.getenv("APY_CONSTANT", "0.15"))  # –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ APY‚âàK/width

# –ü–æ—Ä–æ–≥–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
P_HIGH = float(os.getenv("P_HIGH", "0.25"))   # ‚â•25 % ‚Üí ¬±0,30 %
P_MED  = float(os.getenv("P_MED",  "0.10"))   # 10‚Äì25 % ‚Üí ¬±0,17 %

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID   = os.getenv("CHAT_ID")
if not BOT_TOKEN or not CHAT_ID:
    raise SystemExit("[env] BOT_TOKEN –∏/–∏–ª–∏ CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äì –æ—Å—Ç–∞–Ω–æ–≤–∫–∞.")

###############################################################################
COINBASE_API = "https://api.exchange.coinbase.com"
D_FLAT = 0.10  # % —à–∏—Ä–∏–Ω–∞ —É–∑–∫–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞

###############################################################################
#‚ÄÑ –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
###############################################################################

def cdf_standard_normal(x: float) -> float:
    """N(0,1) CDF via error function"""
    return 0.5 * (1 + erf(x / sqrt(2)))

def exit_probability(d_pct: float, sigma_pct: float, horizon_h: float) -> float:
    """P(|Œîp|>d) –∑–∞ horizon_h, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è –≥–µ–æ–º. –±—Ä–æ—É–Ω–æ–≤—Å–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"""
    if sigma_pct == 0:
        return 0.0
    z = d_pct / (sigma_pct * sqrt(horizon_h / 24))
    return 2 * (1 - cdf_standard_normal(z))

def expected_apy(width_pct: float) -> float:
    return APY_K / (width_pct / 100)

###############################################################################
#‚ÄÑ –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
###############################################################################

def fetch_candles(pair: str, granularity: int, limit: int = 300):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ [time, low, high, open, close, volume] (—Å—Ç.‚Üí–Ω–≤.)"""
    url = f"{COINBASE_API}/products/{pair}/candles"
    params = {"granularity": granularity, "limit": limit}
    r = requests.get(url, params=params, timeout=10)
    r.raise_for_status()
    return sorted(r.json(), key=lambda x: x[0])


def true_range(cur, prev_close):
    high, low, close = cur[2], cur[1], cur[4]
    return max(high - low, abs(high - prev_close), abs(low - prev_close))


def compute_atr(candles, window):
    if len(candles) < window + 1:
        raise ValueError("Not enough candles for ATR calculation")
    trs = [true_range(candles[-i], candles[-i - 1][4]) for i in range(1, window + 1)]
    return mean(trs)

###############################################################################
#‚ÄÑ Telegram
###############################################################################

def tg_send(text: str):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": text, "parse_mode": "Markdown"}
    r = requests.post(url, json=payload, timeout=10)
    r.raise_for_status()

###############################################################################
#‚ÄÑ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
###############################################################################

def main():
    last_candle_ts = 0
    while True:
        try:
            candles = fetch_candles(PAIR, GRANULARITY, ATR_WINDOWS + 2)
            atr_raw = compute_atr(candles, ATR_WINDOWS)
            close = candles[-1][4]
            sigma_pct = atr_raw / close * 100  # —Ä–µ–∞–ª–∏–∑. œÉ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            p_exit = exit_probability(D_FLAT, sigma_pct, HORIZON_HRS)

            # –†–µ—à–µ–Ω–∏–µ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É
            if sigma_pct > 0.50 or p_exit >= 0.60:
                # –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç—É—Ä–±—É–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å
                width_pct = None
                msg = (
                    f"üö® *–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫!* œÉ24h={sigma_pct:.2f}%  P_exit={p_exit*100:.1f}%\n"
                    "–ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–≤–µ—Å—Ç–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∏–ª–∏ 100 %-—Ö–µ–¥–∂." )
            elif p_exit >= P_HIGH:
                width_pct = 0.30
                msg = (
                    f"‚ö†Ô∏è œÉ24h={sigma_pct:.2f}%  P_exit={p_exit*100:.1f}%\n"
                    f"‚Üí –¥–∏–∞–ø–∞–∑–æ–Ω ¬±0.30 %  (‚âà{expected_apy(width_pct):.0f}% APY)" )
            elif p_exit >= P_MED:
                width_pct = 0.17
                msg = (
                    f"œÉ24h={sigma_pct:.2f}%  P_exit={p_exit*100:.1f}%\n"
                    f"‚Üí –¥–∏–∞–ø–∞–∑–æ–Ω ¬±0.17 %  (‚âà{expected_apy(width_pct):.0f}% APY)" )
            else:
                width_pct = 0.10
                msg = (
                    f"œÉ24h={sigma_pct:.2f}%  P_exit={p_exit*100:.1f}% (—Å–ø–æ–∫–æ–π–Ω–æ)\n"
                    f"‚Üí –¥–µ—Ä–∂–∏–º ¬±0.10 %  (‚âà{expected_apy(width_pct):.0f}% APY)" )

            candle_ts = candles[-1][0]
            if candle_ts != last_candle_ts:
                ts_str = datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M UTC')
                tg_send(f"{msg}\n`{ts_str}`")
                last_candle_ts = candle_ts
                print("[sent]", msg)

        except Exception as exc:
            print("[error]", exc)

        time.sleep(GRANULARITY)

###############################################################################
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("Stopped by user.")
