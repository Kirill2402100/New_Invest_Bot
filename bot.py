# -*- coding: utf-8 -*-
"""
LP supervisor bot ‚Äì c –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Google Sheets.
"""
import os, json, asyncio, sys, atexit
from datetime import datetime, timezone
from statistics import mean
from math import erf, sqrt

import requests, gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, Bot
from telegram.ext import (
    Application, CommandHandler, ContextTypes, MessageHandler, filters
)

# ---------- ANTI-DUPLICATE PROTECTION (–û—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –Ω–æ –Ω–µ –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ –Ω–µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é) ----------
LOCKFILE = "lockfile.pid"

if os.path.exists(LOCKFILE):
    print("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Ç–æ—Ä–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä.")
    sys.exit(1)

with open(LOCKFILE, "w") as f:
    f.write(str(os.getpid()))

def cleanup():
    if os.path.exists(LOCKFILE):
        os.remove(LOCKFILE)
atexit.register(cleanup)


# ---------- –ü–ê–†–ê–ú–ï–¢–†–´ ----------
PAIR          = os.getenv("PAIR", "EURC-USDC")
GRANULARITY   = 60
ATR_WINDOW    = 48
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ CHAT_IDS –∏ BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Railway
CHAT_IDS      = [int(cid) for cid in os.getenv("CHAT_IDS", "0").split(",")]
BOT_TOKEN     = os.getenv("BOT_TOKEN")

# ---------- GOOGLE SHEETS ----------
SHEET_ID      = os.getenv("SHEET_ID")
scope         = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive",
]
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ GOOGLE_CREDENTIALS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
creds_dict    = json.loads(os.getenv("GOOGLE_CREDENTIALS"))
creds         = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
gs            = gspread.authorize(creds)

LOGS_WS       = gs.open_by_key(SHEET_ID).worksheet("LP_Logs")

HEADERS = [
    "–î–∞—Ç–∞-–≤—Ä–µ–º—è", "–í—Ä–µ–º—è start", "–í—Ä–µ–º—è stop", "–ú–∏–Ω—É—Ç",
    "P&L –∑–∞ —Ü–∏–∫–ª (USDC)", "APR —Ü–∏–∫–ª–∞ (%)"
]

def ensure_headers(ws):
    if ws.row_values(1) != HEADERS:
        ws.resize(rows=1) # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—Å—Ç–∏–º –ª–∏—à–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        ws.update('A1', [HEADERS]) # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏

ensure_headers(LOGS_WS)

# ---------- –°–û–°–¢–û–Ø–ù–ò–ï ----------
lp_open        = False
lp_start_price = None
lp_start_time  = None
lp_capital_in  = 0.0
lp_range_low   = None
lp_range_high  = None
last_in_lp     = True
entry_exit_log = []

# ---------- –£–¢–ò–õ–ò–¢–´ ----------
def cdf_norm(x): return 0.5 * (1 + erf(x / sqrt(2)))

def price_and_atr():
    url = f"https://api.exchange.coinbase.com/products/{PAIR}/candles"
    r   = requests.get(url, params=dict(granularity=GRANULARITY, limit=ATR_WINDOW+1))
    r.raise_for_status()
    candles = sorted(r.json(), key=lambda x: x[0])
    closes  = [c[4] for c in candles]
    atr     = mean(abs(closes[i] - closes[i-1]) for i in range(1, len(closes)))
    return closes[-1], atr / closes[-1] * 100

async def say(bot: Bot, text: str):
    for cid in CHAT_IDS:
        await bot.send_message(cid, text, parse_mode="Markdown")

def escape_md(text):
    escape_chars = r"_*[]()~`>#+-=|{}.!"
    # –í –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ python-telegram-bot –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π escape
    # from telegram.helpers import escape_markdown
    # return escape_markdown(text, version=2)
    # –ù–æ –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    for c in escape_chars:
        text = text.replace(c, f"\\{c}")
    return text

# ---------- –ö–û–ú–ê–ù–î–´ ----------
async def cmd_capital(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global lp_capital_in
    if not ctx.args: return
    try:
        lp_capital_in = float(ctx.args[0].replace(',', '.'))
        await update.message.reply_text(
            f"üí∞ –ö–∞–ø–∏—Ç–∞–ª –≤—Ö–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *{lp_capital_in:.2f} USDC*", parse_mode='Markdown'
        )
    except (ValueError, IndexError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: /capital 1000.50")


async def cmd_set(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global lp_open, lp_start_price, lp_start_time, lp_range_low, lp_range_high, last_in_lp, entry_exit_log
    if len(ctx.args) != 2:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set <—Ü–µ–Ω–∞_–Ω–∏–∑> <—Ü–µ–Ω–∞_–≤–µ—Ä—Ö>")
        return
    try:
        low, high = sorted(map(float, ctx.args))
        lp_start_price = (low + high) / 2
        lp_range_low, lp_range_high = low, high
        lp_open = True
        lp_start_time = datetime.now(timezone.utc)
        last_in_lp = True
        entry_exit_log = []
        await update.message.reply_text(
            f"üì¶ LP –æ—Ç–∫—Ä—ã—Ç\n–î–∏–∞–ø–∞–∑–æ–Ω: `{low}` ‚Äì `{high}`", parse_mode='Markdown'
        )
    except ValueError:
        await update.message.reply_text("–¶–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏. –ü—Ä–∏–º–µ—Ä: /set 0.9995 1.0005")


async def cmd_reset(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global lp_open
    if not lp_open:
        await update.message.reply_text("LP —É–∂–µ –∑–∞–∫—Ä—ã—Ç.")
        return
    if not ctx.args:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reset <–∫–∞–ø–∏—Ç–∞–ª_–Ω–∞_–≤—ã—Ö–æ–¥–µ_USDC>")
        return
    try:
        cap_out = float(ctx.args[0].replace(',', '.'))
        t_stop = datetime.now(timezone.utc)
        minutes = round((t_stop - lp_start_time).total_seconds() / 60, 1)
        pnl = cap_out - lp_capital_in
        apr = (pnl / lp_capital_in) * (525600 / minutes) * 100 if minutes > 0 and lp_capital_in > 0 else 0

        row = [
            lp_start_time.strftime('%Y-%m-%d %H:%M:%S'),
            lp_start_time.strftime('%H:%M'),
            t_stop.strftime('%H:%M'),
            minutes,
            round(pnl, 2),
            round(apr, 1)
        ]
        # –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ gspread –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        await asyncio.to_thread(LOGS_WS.append_row, row, value_input_option='USER_ENTERED')
        lp_open = False
        await update.message.reply_text(
            f"üö™ LP –∑–∞–∫—Ä—ã—Ç. P&L: *{pnl:+.2f} USDC*, APR: *{apr:.1f}%*", parse_mode='Markdown'
        )
    except ValueError:
        await update.message.reply_text("–ö–∞–ø–∏—Ç–∞–ª –Ω–∞ –≤—ã—Ö–æ–¥–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /reset 1005.70")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ LP: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ LP: {e}")

async def cmd_status(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    status = "‚úÖ OPEN" if lp_open else "‚ùå CLOSED"
    msg = f"–°—Ç–∞—Ç—É—Å LP: *{status}*"
    if lp_open:
        msg += f"\n–î–∏–∞–ø–∞–∑–æ–Ω: `{lp_range_low}` - `{lp_range_high}`"
        msg += f"\n–ö–∞–ø–∏—Ç–∞–ª –≤—Ö–æ–¥–∞: `{lp_capital_in:.2f} USDC`"
        msg += f"\n–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: `{lp_start_time.strftime('%Y-%m-%d %H:%M')}` UTC"
    await update.message.reply_text(msg, parse_mode='Markdown')

# ---------- WATCHER ----------
async def watcher(app: Application):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É."""
    global lp_open, lp_range_low, lp_range_high, last_in_lp, entry_exit_log

    while True:
        await asyncio.sleep(60)

        if not lp_open or lp_range_low is None or lp_range_high is None:
            continue

        try:
            price, _ = price_and_atr()
            center = lp_start_price
            deviation = (price - center) / center * 100 if center != 0 else 0
            now_in_lp = lp_range_low <= price <= lp_range_high

            # –õ–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞
            if now_in_lp != last_in_lp:
                last_in_lp = now_in_lp
                if not now_in_lp: # –¶–µ–Ω–∞ –≤—ã—à–ª–∞ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                    msg = f"PRICE *LP EXIT* | –¶–µ–Ω–∞: `{price:.5f}` (–æ—Ç —Ü–µ–Ω—Ç—Ä–∞: {deviation:+.3f}%)"
                    await say(app.bot, msg) # –ò—Å–ø–æ–ª—å–∑—É–µ–º escape_md –ø—Ä—è–º–æ —Ç—É—Ç
                else: # –¶–µ–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
                    msg = f"PRICE *LP RE-ENTRY* | –¶–µ–Ω–∞: `{price:.5f}` (–æ—Ç —Ü–µ–Ω—Ç—Ä–∞: {deviation:+.3f}%)"
                    await say(app.bot, msg)

            # –õ–æ–≥–∏–∫–∞ "–ø–∏–ª—ã"
            entry_exit_log.append(now_in_lp)
            if len(entry_exit_log) > 240: # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ª–æ–≥ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 4 —á–∞—Å–∞–º–∏ (240 –º–∏–Ω—É—Ç)
                entry_exit_log.pop(0)

            flips = sum(1 for i in range(1, len(entry_exit_log)) if entry_exit_log[i] != entry_exit_log[i-1])
            if flips >= 6:
                await say(app.bot, "üîÅ *–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–∏–ª–∞: 6+ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –≥—Ä–∞–Ω–∏—Ü—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —á–∞—Å–∞.*\n‚Üí –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å LP —Å –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º.")
                entry_exit_log = [] # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è

        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –≤ watcher: {e}")
            # –ù–µ —Å–ø–∞–º–∏–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –æ–± –æ—à–∏–±–∫–∞—Ö —Å–µ—Ç–∏, –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ watcher: {e}")
            await say(app.bot, f"üö® –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")


# ---------- –ó–ê–ü–£–°–ö –ë–û–¢–ê (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø) ----------
def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    if not BOT_TOKEN:
        print("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        sys.exit(1)

    # 1. –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # 2. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", cmd_status)) # –î–æ–±–∞–≤–∏–º status –Ω–∞ /start
    application.add_handler(CommandHandler("capital", cmd_capital))
    application.add_handler(CommandHandler("set", cmd_set))
    application.add_handler(CommandHandler("reset", cmd_reset))
    application.add_handler(CommandHandler("status", cmd_status))
    
    # –û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ —è–≤–ª—è—é—â–µ–µ—Å—è –∫–æ–º–∞–Ω–¥–æ–π
    async def show_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(f"–í–∞—à chat_id: `{update.effective_chat.id}`", parse_mode='Markdown')
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, show_chat_id))

    # 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É watcher
    application.job_queue.run_once(watcher, 5, name="price_watcher")
    
    # 4. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    # drop_pending_updates=True –æ—á–∏—Å—Ç–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏–ª, –ø–æ–∫–∞ –±—ã–ª –æ—Ñ—Ñ–ª–∞–π–Ω
    application.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    # `nest_asyncio` –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    main()
