# lp_supervisor_bot_with_reports.py

import os
import time
import json
from datetime import datetime, timezone
from statistics import mean
from math import erf, sqrt
import requests
import asyncio
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
PAIR = os.getenv("PAIR", "EURC-USDC")
GRANULARITY = 60  # 1 –º–∏–Ω—É—Ç–∞
ATR_WINDOW = 48
OBSERVE_INTERVAL = 15 * 60  # 15 –º–∏–Ω—É—Ç

CHAT_IDS = [
    int(os.getenv("CHAT_ID_MAIN", "0")),
    int(os.getenv("CHAT_ID_OPERATOR", "0"))
]
BOT_TOKEN = os.getenv("BOT_TOKEN")

# === Google Sheets —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
import json

SHEET_ID = os.getenv("SHEET_ID")

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
CREDENTIALS_FILE = "credentials.json"
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)

import gspread
sheet_client = gspread.authorize(creds)
sheet = sheet_client.open_by_key(SHEET_ID).worksheet("LP_Logs")

# === –°–æ—Å—Ç–æ—è–Ω–∏–µ LP ===
lp_center = None
lp_lower = None
lp_upper = None
lp_state = "closed"
observe_mode = False
observe_start = None
last_exit_price = None
entry_exit_count = 0
last_report_time = 0
lp_capital = 0.0
lp_start_time = None

# === –£—Ç–∏–ª–∏—Ç—ã ===
def cdf_standard_normal(x):
    return 0.5 * (1 + erf(x / sqrt(2)))

def exit_probability(d_pct, sigma_pct, horizon_h=6):
    if sigma_pct == 0:
        return 0.0
    z = d_pct / (sigma_pct * sqrt(horizon_h / 24))
    return 2 * (1 - cdf_standard_normal(z))

def fetch_price_and_atr():
    url = f"https://api.exchange.coinbase.com/products/{PAIR}/candles"
    params = {"granularity": GRANULARITY, "limit": ATR_WINDOW + 1}
    r = requests.get(url, params=params)
    r.raise_for_status()
    candles = sorted(r.json(), key=lambda x: x[0])
    closes = [c[4] for c in candles]
    tr = [abs(closes[i] - closes[i-1]) for i in range(1, len(closes))]
    atr = mean(tr)
    return closes[-1], atr / closes[-1] * 100

async def broadcast(text):
    bot = Bot(token=BOT_TOKEN)
    for cid in CHAT_IDS:
        await bot.send_message(chat_id=cid, text=text, parse_mode='Markdown')

# === Telegram –ö–æ–º–∞–Ω–¥—ã ===
async def set_lp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global lp_center, lp_start_time
    if context.args:
        try:
            lp_center = float(context.args[0].replace(",", "."))
            lp_start_time = datetime.now(timezone.utc)
            await update.message.reply_text(f"üìç –¶–µ–Ω—Ç—Ä LP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{lp_center:.4f}`", parse_mode='Markdown')
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: /set <—Ü–µ–Ω–∞>")

async def step_lp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global lp_lower, lp_upper, lp_state, lp_center, observe_mode, entry_exit_count
    if lp_center is None:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π —Ü–µ–Ω—Ç—Ä LP: /set <—Ü–µ–Ω–∞>")
        return
    if len(context.args) == 2:
        low, high = map(float, context.args)
        lp_lower = lp_center * (1 - low / 100)
        lp_upper = lp_center * (1 + high / 100)
        lp_state = "open"
        observe_mode = False
        entry_exit_count = 0
        await update.message.reply_text(
            f"üì¶ –î–∏–∞–ø–∞–∑–æ–Ω LP: `{lp_lower:.4f} ‚Äì {lp_upper:.4f}`\n–°—Ç–∞—Ç—É—Å: *LP –∞–∫—Ç–∏–≤–µ–Ω*.", parse_mode='Markdown')

async def capital(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global lp_capital
    if context.args:
        try:
            lp_capital = float(context.args[0].replace(",", "."))
            await update.message.reply_text(f"üí∞ –ö–∞–ø–∏—Ç–∞–ª LP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{lp_capital:.2f} USDC`", parse_mode='Markdown')
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: /capital <—Å—É–º–º–∞>")

# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===
async def monitor():
    global observe_mode, observe_start, last_exit_price, entry_exit_count, last_report_time, lp_start_time
    while True:
        if lp_state != "open":
            await asyncio.sleep(60)
            continue

        price, sigma = fetch_price_and_atr()
        p_exit = exit_probability(0.1, sigma)
        now = datetime.now(timezone.utc)

        in_range = lp_lower <= price <= lp_upper
        message = None

        if in_range:
            if observe_mode and (now - observe_start).total_seconds() > OBSERVE_INTERVAL:
                observe_mode = False
                entry_exit_count = 0
                message = (
                    f"‚úÖ –¶–µ–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω\n\n"
                    f"–¶–µ–Ω–∞: `{price:.4f}`  \nœÉ = `{sigma:.2f}%`\nP_exit = `{p_exit*100:.1f}%`\n\n"
                    "–î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–∞–±–∏–ª–µ–Ω.  \nüìä –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ LP –∏–ª–∏ —É–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏."
                )
        else:
            diff_pct = abs(price - (lp_upper if price > lp_upper else lp_lower)) / lp_center * 100
            if not observe_mode:
                observe_mode = True
                observe_start = now
                entry_exit_count = 1
                if lp_start_time:
                    duration_min = (now - lp_start_time).total_seconds() / 60
                    apr = 0
                    if duration_min > 0 and lp_capital > 0:
                        apr = ((price - lp_center) / lp_capital) * (525600 / duration_min) * 100
                    sheet.append_row([
                        now.strftime('%Y-%m-%d %H:%M:%S'),
                        f"{lp_center:.4f}", f"{lp_lower:.4f} ‚Äì {lp_upper:.4f}",
                        f"{lp_capital:.2f}", f"{price:.4f}", f"{price - lp_center:.4f}",
                        f"{duration_min:.1f}", f"{apr:.2f}"
                    ])
            else:
                entry_exit_count += 1

            header = "üö® –¶–µ–Ω–∞ –≤—ã—à–ª–∞ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω"
            if diff_pct > 0.05:
                header = "üö® –¶–µ–Ω–∞ *—Ä–µ–∑–∫–æ* –≤—ã—à–ª–∞ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω"

            if diff_pct <= 0.02:
                msg = "–°–ø–æ–∫–æ–π–Ω–æ. –ù–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–π."
            elif diff_pct <= 0.05:
                msg = (
                    "üìâ –£–º–µ—Ä–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ.\n\n"
                    "üí± –†–µ–∫–æ–º–µ–Ω–¥—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å **50%** –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –≤ **USDC** –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–∞."
                )
            else:
                msg = (
                    "‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å.\n\n"
                    "üí± *–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –≤ USDC*."
                )

            message = (
                f"{header}\n–¢–µ–∫—É—â–∞—è: `{price:.4f}` (–Ω–∞ {diff_pct:.2f}% {'–≤—ã—à–µ' if price > lp_upper else '–Ω–∏–∂–µ'} –≥—Ä–∞–Ω–∏—Ü—ã)\n\n"
                f"œÉ = `{sigma:.2f}%`\nP_exit = `{p_exit*100:.1f}%`\n\n"
                f"{msg}\nüïµÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é‚Ä¶"
            )

            if entry_exit_count >= 5:
                message += (
                    f"\n\nüîÅ –¶–µ–Ω–∞ –≤—ã—à–ª–∞ –∏ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 5 —Ä–∞–∑\n\n"
                    f"–¢–µ–∫—É—â–∞—è: `{price:.4f}`\n–î–∏–∞–ø–∞–∑–æ–Ω: `{lp_lower:.4f} ‚Äì {lp_upper:.4f}`\n\n"
                    f"‚ö†Ô∏è –¶–µ–Ω–∞ –ø–∏–ª–∏—Ç –≥—Ä–∞–Ω–∏—Ü—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞.\nüìê –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω LP."
                )

        if message and (now.timestamp() - last_report_time) > 60:
            await broadcast(message)
            last_report_time = now.timestamp()

        await asyncio.sleep(60)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()

    from telegram.ext import Application
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("set", set_lp))
    app.add_handler(CommandHandler("step", step_lp))
    app.add_handler(CommandHandler("capital", capital))

    loop = asyncio.get_event_loop()
    loop.create_task(monitor())
    app.run_polling()
