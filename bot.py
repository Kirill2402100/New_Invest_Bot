#!/usr/bin/env python3
# ============================================================================
# Flat-Liner v11.7 ‚Ä¢ 16 Jul 2025
# ============================================================================
# ‚Ä¢ –°–¢–†–ê–¢–ï–ì–ò–Ø: –§–ª—ç—Ç–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è 'Flat_BB_Fade' —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ ADX
# ‚Ä¢ –ë–ò–†–ñ–ê: OKX (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥–∞)
# ‚Ä¢ –ê–í–¢–û–¢–†–ï–ô–î–ò–ù–ì: –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
# ‚Ä¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï v11.7:
#   - –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω –º–µ—Ö–∞–Ω–∏–∑–º –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º asyncio.Event
#     –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –∏ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –≥—Ä–∞—Ü–∏–æ–∑–Ω–æ–≥–æ
#     –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, —á—Ç–æ —Ä–µ—à–∞–µ—Ç –æ—à–∏–±–∫–∏ 'Conflict' –∏ 'RuntimeError'.
# ============================================================================

import os
import json
import logging
import asyncio
import traceback
import signal
from datetime import datetime, timezone, timedelta

import numpy as np
import pandas as pd
import ccxt.async_support as ccxt
import pandas_ta as ta
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Bot, Update
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, ContextTypes
)

# ‚îÄ‚îÄ ENV: –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_IDS_RAW = os.getenv("CHAT_IDS", "")
PAIR_SYMBOL = os.getenv("PAIR_SYMBOL", "BTC-USDT-SWAP") # –§–æ—Ä–º–∞—Ç OKX
TIMEFRAME = os.getenv("TIMEFRAME", "5m")
STRAT_VERSION = "v11_7_flatliner_okx_render"
SHEET_ID = os.getenv("SHEET_ID")

# --- OKX API ---
OKX_API_KEY = os.getenv("OKX_API_KEY")
OKX_API_SECRET = os.getenv("OKX_API_SECRET")
OKX_API_PASSPHRASE = os.getenv("OKX_API_PASSPHRASE")
OKX_DEMO_MODE = os.getenv("OKX_DEMO_MODE", "0")

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ---
DEFAULT_DEPOSIT_USD = float(os.getenv("DEFAULT_DEPOSIT_USD", "50.0"))
DEFAULT_LEVERAGE = float(os.getenv("DEFAULT_LEVERAGE", "100.0"))
FLAT_RR_RATIO = float(os.getenv("FLAT_RR_RATIO", "1.0"))
FLAT_SL_PCT = float(os.getenv("FLAT_SL_PCT", "0.10"))
FLAT_RSI_OVERSOLD = float(os.getenv("FLAT_RSI_OVERSOLD", "35"))
FLAT_RSI_OVERBOUGHT = float(os.getenv("FLAT_RSI_OVERBOUGHT", "65"))
REPORT_TIME_UTC = os.getenv("REPORT_TIME_UTC", "21:00")

# ‚îÄ‚îÄ –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(level=logging.INFO, format="%(asctime)s  %(levelname)-8s  %(message)s")
log = logging.getLogger(STRAT_VERSION)

if not all([BOT_TOKEN, CHAT_IDS_RAW, OKX_API_KEY, OKX_API_SECRET, OKX_API_PASSPHRASE]):
    log.critical("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"); raise SystemExit

CHAT_IDS = {int(cid) for cid in CHAT_IDS_RAW.split(",") if cid.strip()}

# ‚îÄ‚îÄ GOOGLE SHEETS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TRADE_LOG_WS = None
def setup_google_sheets() -> None:
    global TRADE_LOG_WS
    if not SHEET_ID or not os.getenv("GOOGLE_CREDENTIALS"):
        log.warning("ID —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
        return
    try:
        creds_json = json.loads(os.getenv("GOOGLE_CREDENTIALS"))
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_json, ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"])
        gs = gspread.authorize(creds)
        ss = gs.open_by_key(SHEET_ID)
        headers = ["Signal_ID", "Version", "Strategy_Used", "Status", "Side", "Entry_Time_UTC", "Exit_Time_UTC", "Entry_Price", "Exit_Price", "SL_Price", "TP_Price", "Gross_P&L_USD", "Fee_USD", "Net_P&L_USD", "Entry_Deposit_USD", "Entry_ADX", "ADX_Threshold"]
        ws_name = f"OKX_Trades_{PAIR_SYMBOL.replace('-','')}"
        try:
            ws = ss.worksheet(ws_name)
        except gspread.WorksheetNotFound:
            ws = ss.add_worksheet(ws_name, rows="1000", cols=len(headers))
        if ws.row_values(1) != headers:
            ws.clear(); ws.update("A1", [headers])
            ws.format(f"A1:{chr(ord('A')+len(headers)-1)}1", {"textFormat": {"bold": True}})
        TRADE_LOG_WS = ws
        log.info(f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Google Sheet –≤–∫–ª—é—á–µ–Ω–æ ‚ûú {ws_name}")
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}"); TRADE_LOG_WS = None

# ‚îÄ‚îÄ –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ï–ú ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
STATE_FILE = f"state_{STRAT_VERSION}_{PAIR_SYMBOL.replace('-','')}.json"
state = {"monitoring": False, "active_trade": None, "leverage": DEFAULT_LEVERAGE, "deposit_usd": DEFAULT_DEPOSIT_USD, "dynamic_adx_threshold": 25.0, "last_adx_recalc_time": None, "daily_report_data": []}
def save_state():
    with open(STATE_FILE, 'w') as f: json.dump(state, f, indent=2)
def load_state():
    global state
    if os.path.exists(STATE_FILE):
        try:
            with open(STATE_FILE, 'r') as f: state.update(json.load(f))
        except (json.JSONDecodeError, TypeError): save_state()
    else: save_state()

# ‚îÄ‚îÄ –ò–ù–î–ò–ö–ê–¢–û–†–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def add_indicators(df: pd.DataFrame) -> pd.DataFrame:
    df.ta.rsi(length=14, append=True, col_names=("RSI",))
    df.ta.adx(length=14, append=True, col_names=("ADX", "DMP", "DMN"))
    df.ta.bbands(length=20, std=2, append=True, col_names=("BBL", "BBM", "BBU", "BBB", "BBP"))
    return df.dropna()

# ‚îÄ‚îÄ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def notify_all(text: str, bot: Bot = None):
    temp_bot = bot if bot else Bot(token=BOT_TOKEN)
    for cid in CHAT_IDS:
        try: await temp_bot.send_message(cid, text, parse_mode="HTML")
        except Exception as e: log.error(f"TG fail -> {cid}: {e}")

# ‚îÄ‚îÄ –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï –° –ë–ò–†–ñ–ï–ô (OKX) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def initialize_exchange():
    try:
        exchange = ccxt.okx({'apiKey': OKX_API_KEY, 'secret': OKX_API_SECRET, 'password': OKX_API_PASSPHRASE, 'options': {'defaultType': 'swap'}})
        exchange.set_sandbox_mode(OKX_DEMO_MODE == '1')
        await exchange.load_markets()
        log.info(f"–ë–∏—Ä–∂–∞ OKX –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –î–µ–º–æ: {OKX_DEMO_MODE == '1'}. CCXT: {ccxt.__version__}")
        return exchange
    except Exception as e:
        log.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏—Ä–∂–∏: {e}"); return None

async def set_leverage_on_exchange(exchange, symbol, leverage):
    try:
        await exchange.set_leverage(leverage, symbol, {'mgnMode': 'isolated', 'posSide': 'long'})
        await exchange.set_leverage(leverage, symbol, {'mgnMode': 'isolated', 'posSide': 'short'})
        log.info(f"–ù–∞ –±–∏—Ä–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–ª–µ—á–æ {leverage}x –¥–ª—è {symbol}")
        return True
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞: {e}"); return False

async def execute_trade(exchange, signal: dict):
    side = signal['side']
    deposit = signal['deposit_usd']
    leverage = signal['leverage']
    entry_price = signal['entry_price']
    sl_price = signal['sl_price']
    tp_price = signal['tp_price']
    try:
        market = exchange.markets[PAIR_SYMBOL]
        position_value_usd = deposit * leverage
        amount_in_base_currency = position_value_usd / entry_price
        order_size_contracts = round(amount_in_base_currency / float(market['contractSize']))

        if order_size_contracts < float(market['limits']['amount']['min']):
            await notify_all(f"üî¥ –û–®–ò–ë–ö–ê: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä ({order_size_contracts}) –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ."); return None

        params = {
            'tdMode': 'isolated',
            'posSide': 'long' if side == 'LONG' else 'short',
            'slTriggerPx': str(sl_price),
            'slOrdPx': '-1',
            'tpTriggerPx': str(tp_price),
            'tpOrdPx': '-1'
        }
        
        order = await exchange.create_order(
            symbol=PAIR_SYMBOL, type='market', side='buy' if side == 'LONG' else 'sell',
            amount=order_size_contracts, params=params
        )
        
        log.info(f"–û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω! ID: {order['id']}")
        await notify_all(f"‚úÖ <b>–û–†–î–ï–† –†–ê–ó–ú–ï–©–ï–ù</b>\n\n<b>ID:</b> {order['id']}\n<b>–¢–∏–ø:</b> {side}\n<b>SL:</b> {sl_price:.2f}\n<b>TP:</b> {tp_price:.2f}")
        return order['id']
    except Exception as e:
        error_details = traceback.format_exc()
        log.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}\n{error_details}")
        await notify_all(f"üî¥ –û–®–ò–ë–ö–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –û–†–î–ï–†–ê: <code>{e}</code>")
        return None

async def process_closed_trade(exchange, trade_details, bot):
    try:
        log.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–¥–µ–ª–∫–∏. ID –æ—Ä–¥–µ—Ä–∞: {trade_details['id']}")
        order_id = trade_details['id']
        closed_order = await exchange.fetch_order(order_id, PAIR_SYMBOL)
        exit_price = float(closed_order.get('average', trade_details['sl_price']))
        fee = abs(float(closed_order.get('fee', {}).get('cost', 0)))
        realized_pnl = float(closed_order['info'].get('pnl', 0))
        net_pnl = realized_pnl - fee
        status = "WIN" if net_pnl > 0 else "LOSS"
        report = {"id": order_id, "status": status, "side": trade_details['side'], "entry_price": trade_details['entry_price'], "exit_price": exit_price, "net_pnl_usd": round(net_pnl, 2), "fee_usd": round(fee, 2)}
        state["daily_report_data"].append({"pnl_usd": report["net_pnl_usd"], "entry_usd": trade_details['deposit_usd']})
        save_state()
        await notify_all(f"{'‚úÖ' if status == 'WIN' else '‚ùå'} <b>–°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê</b>\n\n<b>ID:</b> {report['id']} | <b>–¢–∏–ø:</b> {report['side']}\n<b>–í—Ö–æ–¥:</b> {report['entry_price']:.2f} | <b>–í—ã—Ö–æ–¥:</b> {report['exit_price']:.2f}\nüí∞ <b>Net P&L: {report['net_pnl_usd']:.2f}$</b> (Fee: {report['fee_usd']:.2f}$)", bot)
        if TRADE_LOG_WS:
            pass
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–¥–µ–ª–∫–∏ {trade_details['id']}: {e}")

async def recalculate_adx_threshold():
    try:
        log.info("–ü–µ—Ä–µ—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä–æ–≥–∞ ADX...")
        exchange = await initialize_exchange()
        if not exchange: return
        ohlcv = await exchange.fetch_ohlcv(PAIR_SYMBOL, timeframe=TIMEFRAME, limit=2000)
        await exchange.close()
        df = pd.DataFrame(ohlcv, columns=["ts","open","high","low","close","volume"])
        df.ta.adx(length=14, append=True, col_names=("ADX", "DMP", "DMN"))
        df.dropna(inplace=True)
        if not df.empty:
            adx_values = df["ADX"]
            new_threshold = (np.percentile(adx_values, 20) + np.percentile(adx_values, 30)) / 2
            state["dynamic_adx_threshold"] = new_threshold
            state["last_adx_recalc_time"] = datetime.now(timezone.utc).isoformat()
            save_state()
            log.info(f"–ù–æ–≤—ã–π –ø–æ—Ä–æ–≥ ADX: {new_threshold:.2f}")
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ –ø–æ—Ä–æ–≥–∞ ADX: {e}")

# ‚îÄ‚îÄ –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ë–û–¢–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def monitor(app: Application):
    exchange = None
    try:
        exchange = await initialize_exchange()
        if not exchange:
            await notify_all("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏—Ä–∂—É. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", app.bot)
            return
        if not await set_leverage_on_exchange(exchange, PAIR_SYMBOL, state['leverage']):
            await notify_all("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", app.bot)
            return
        
        await recalculate_adx_threshold()
        log.info("üöÄ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω: %s %s", PAIR_SYMBOL, TIMEFRAME)
        
        while state.get("monitoring", False):
            now_utc = datetime.now(timezone.utc)
            last_recalc_str = state.get("last_adx_recalc_time")
            if not last_recalc_str or (now_utc - datetime.fromisoformat(last_recalc_str)).total_seconds() > 3600:
                 await recalculate_adx_threshold()

            if active_trade_details := state.get("active_trade"):
                positions = await exchange.fetch_positions([PAIR_SYMBOL])
                trade_side = 'long' if active_trade_details['side'] == 'LONG' else 'short'
                active_position = next((p for p in positions if p.get('side') == trade_side and float(p.get('contracts', 0)) > 0), None)
                if not active_position:
                    log.info(f"–ü–æ–∑–∏—Ü–∏—è {active_trade_details['id']} –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
                    asyncio.create_task(process_closed_trade(exchange, active_trade_details, app.bot))
                    state["active_trade"] = None; save_state()
                await asyncio.sleep(60); continue

            ohlcv = await exchange.fetch_ohlcv(PAIR_SYMBOL, timeframe=TIMEFRAME, limit=100)
            df = add_indicators(pd.DataFrame(ohlcv, columns=["ts", "open", "high", "low", "close", "volume"]))
            if len(df) < 2: await asyncio.sleep(60); continue

            last, price = df.iloc[-1], df.iloc[-1]["close"]
            if last["ADX"] >= state.get('dynamic_adx_threshold', 25):
                await asyncio.sleep(60); continue

            side = None
            if price <= last["BBL"] and last["RSI"] < FLAT_RSI_OVERSOLD: side = "LONG"
            elif price >= last["BBU"] and last["RSI"] > FLAT_RSI_OVERBOUGHT: side = "SHORT"

            if side:
                sl_price = price * (1 - FLAT_SL_PCT / 100) if side == "LONG" else price * (1 + FLAT_SL_PCT / 100)
                tp_price = price * (1 + (FLAT_SL_PCT * FLAT_RR_RATIO) / 100) if side == "LONG" else price * (1 - (FLAT_SL_PCT * FLAT_RR_RATIO) / 100)
                signal = {"side": side, "deposit_usd": state['deposit_usd'], "leverage": state['leverage'], "entry_price": price, "sl_price": sl_price, "tp_price": tp_price}
                
                await notify_all(f"üîî <b>–°–ò–ì–ù–ê–õ: {side}</b> {PAIR_SYMBOL} @ {price:.2f}", app.bot)
                order_id = await execute_trade(exchange, signal)
                if order_id:
                    state["active_trade"] = {"id": order_id, **signal}; save_state()
            
            await asyncio.sleep(60)
    
    except asyncio.CancelledError:
        log.info("–ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è...")
    except Exception as e:
        log.exception("–°–±–æ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
    finally:
        if exchange:
            await exchange.close()
            log.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∏—Ä–∂–µ–π –≤ monitor –∑–∞–∫—Ä—ã—Ç–æ.")
        log.info("‚õîÔ∏è –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# ‚îÄ‚îÄ –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–Å–¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def daily_reporter(app: Application):
    log.info("üìà –°–µ—Ä–≤–∏—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω.")
    while True:
        try:
            now_utc = datetime.now(timezone.utc)
            report_h, report_m = map(int, REPORT_TIME_UTC.split(':'))
            report_time = now_utc.replace(hour=report_h, minute=report_m, second=0, microsecond=0)
            if now_utc > report_time: report_time += timedelta(days=1)
            wait_seconds = (report_time - now_utc).total_seconds()
            log.info(f"–°–ª–µ–¥—É—é—â–∏–π —Å—É—Ç–æ—á–Ω—ã–π –æ—Ç—á—ë—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {REPORT_TIME_UTC} UTC (—á–µ—Ä–µ–∑ {wait_seconds/3600:.2f} —á).")
            await asyncio.sleep(wait_seconds)

            report_data = state.get("daily_report_data", [])
            if not report_data:
                await notify_all(f"üìä <b>–°—É—Ç–æ—á–Ω—ã–π –æ—Ç—á—ë—Ç ({STRAT_VERSION})</b>\n\n–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ —Å–¥–µ–ª–æ–∫ –Ω–µ –±—ã–ª–æ.", app.bot)
                continue

            total_pnl = sum(item['pnl_usd'] for item in report_data)
            wins = sum(1 for item in report_data if item['pnl_usd'] > 0)
            win_rate = (wins / len(report_data)) * 100
            report_msg = (f"üìä <b>–°—É—Ç–æ—á–Ω—ã–π –æ—Ç—á—ë—Ç {STRAT_VERSION}</b>\n\n"
                          f"<b>–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:</b> {len(report_data)} (üìà{wins} / üìâ{len(report_data) - wins})\n"
                          f"<b>–í–∏–Ω—Ä–µ–π—Ç:</b> {win_rate:.2f}%\n"
                          f"üíµ <b>Net P&L: {total_pnl:+.2f}$</b>")
            await notify_all(report_msg, app.bot)
            state["daily_report_data"] = []; save_state()
        except asyncio.CancelledError:
            log.info("–ó–∞–¥–∞—á–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            break
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –≤ daily_reporter: {e}")
            await asyncio.sleep(3600)

# ‚îÄ‚îÄ –ö–û–ú–ê–ù–î–´ TELEGRAM ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start_command(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if state.get("monitoring"):
        await update.message.reply_text(f"–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.", parse_mode="HTML")
        return
    state["monitoring"] = True; save_state()
    await update.message.reply_text(f"‚úÖ –ë–æ—Ç <b>{STRAT_VERSION}</b> –∑–∞–ø—É—â–µ–Ω.", parse_mode="HTML")
    asyncio.create_task(monitor(ctx.application))
async def stop_command(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    state["monitoring"] = False; save_state()
    await update.message.reply_text("‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏.")
async def status_command(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    status = '–ê–ö–¢–ò–í–ï–ù' if state.get('monitoring') else '–û–°–¢–ê–ù–û–í–õ–ï–ù'
    trade_info = f"<b>–ê–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞:</b> {state['active_trade']['id']}" if state.get('active_trade') else "<i>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.</i>"
    await update.message.reply_text(f"<b>–°–¢–ê–¢–£–° ({STRAT_VERSION})</b>\n\n<b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b> {status}\n<b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> {PAIR_SYMBOL}\n{trade_info}", parse_mode="HTML")
async def set_deposit_command(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try:
        deposit = float(ctx.args[0])
        if deposit <= 0: raise ValueError
        state['deposit_usd'] = deposit; save_state()
        await update.message.reply_text(f"‚úÖ –î–µ–ø–æ–∑–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{deposit:.2f}$</b>", parse_mode="HTML")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /set_deposit <—Å—É–º–º–∞>")
async def set_leverage_command(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try:
        leverage = int(ctx.args[0])
        if not 1 <= leverage <= 125: raise ValueError
        exchange = await initialize_exchange()
        if not exchange: await update.message.reply_text("üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ."); return
        if await set_leverage_on_exchange(exchange, PAIR_SYMBOL, leverage):
            state['leverage'] = leverage; save_state()
            await update.message.reply_text(f"‚úÖ –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{leverage}x</b>", parse_mode="HTML")
        else:
            await update.message.reply_text("üî¥ –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞.")
        await exchange.close()
    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /set_leverage <1-125>")
async def test_trade_command(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try:
        args_dict = dict(arg.split('=') for arg in ctx.args)
        deposit, leverage, tp_price, sl_price, side = float(args_dict['deposit']), int(args_dict['leverage']), float(args_dict['tp']), float(args_dict['sl']), args_dict.get('side', 'LONG').upper()
        if side not in ['LONG', 'SHORT']: await update.message.reply_text("‚ùå 'side' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å LONG –∏–ª–∏ SHORT."); return
        await update.message.reply_text(f"üõ† <b>–ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í–û–ô –°–î–ï–õ–ö–ò</b>...", parse_mode="HTML")
        exchange = await initialize_exchange()
        if not exchange: await update.message.reply_text("üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ."); return
        await set_leverage_on_exchange(exchange, PAIR_SYMBOL, leverage)
        ticker = await exchange.fetch_ticker(PAIR_SYMBOL)
        signal = {"side": side, "deposit_usd": deposit, "leverage": leverage, "entry_price": ticker['last'], "sl_price": sl_price, "tp_price": tp_price}
        order_id = await execute_trade(exchange, signal)
        if order_id: state["active_trade"] = {"id": order_id, **signal}; save_state()
        await exchange.close()
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –≤ /test_trade: {e}")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: /test_trade deposit=20 leverage=10 tp=65000 sl=60000 side=LONG", parse_mode="HTML")

async def apitest_command(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚öôÔ∏è <b>–¢–µ—Å—Ç API –∫–ª—é—á–µ–π OKX...</b>", parse_mode="HTML")
    exchange = await initialize_exchange()
    if not exchange:
        await update.message.reply_text("üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏—Ä–∂—É."); return
    try:
        await update.message.reply_text("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å...", parse_mode="HTML")
        balance = await exchange.fetch_balance()
        balance_str = json.dumps(balance, indent=2, ensure_ascii=False)
        if len(balance_str) > 4000:
            balance_str = balance_str[:4000] + "\n... (–æ—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω)"
        await update.message.reply_text(
            f"‚úÖ <b>–£–°–ü–ï–•!</b>\n–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OKX –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.\n\n"
            f"<b>–ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–ª–∞–Ω—Å–∞:</b>\n<pre>{balance_str}</pre>",
            parse_mode="HTML"
        )
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –≤ /apitest: {e}")
        await update.message.reply_text(f"‚ùå <b>–û–®–ò–ë–ö–ê:</b> <code>{e}</code>", parse_mode="HTML")
    finally:
        if exchange:
            await exchange.close()

async def post_init(app: Application):
    load_state()
    setup_google_sheets()
    log.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    await notify_all(f"‚úÖ –ë–æ—Ç <b>{STRAT_VERSION}</b> –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.", bot=app.bot)
    if state.get("monitoring"):
        asyncio.create_task(monitor(app))
    asyncio.create_task(daily_reporter(app))

async def shutdown_handler(app: Application):
    """Handles graceful shutdown."""
    log.warning("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É. –ù–∞—á–∏–Ω–∞—é –≥—Ä–∞—Ü–∏–æ–∑–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
    await notify_all(f"‚ö†Ô∏è –ë–æ—Ç <b>{STRAT_VERSION}</b> –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è/–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è.", bot=app.bot)

    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    log.info(f"–û—Ç–º–µ–Ω—è—é {len(tasks)} —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
    for task in tasks:
        task.cancel()

    await asyncio.gather(*tasks, return_exceptions=True)
    log.info("–í—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

    state["monitoring"] = False
    save_state()
    log.info("–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω.")

async def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º."""
    
    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .post_init(post_init)
        .build()
    )

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –≥—Ä–∞—Ü–∏–æ–∑–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    loop = asyncio.get_running_loop()
    stop = loop.create_future()
    loop.add_signal_handler(signal.SIGTERM, stop.set_result, None)
    loop.add_signal_handler(signal.SIGINT, stop.set_result, None)

    async with app:
        log.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await app.start()
        await stop
        log.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
        await shutdown_handler(app)
        await app.stop()
        log.info("–ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        log.info("–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ —Å–∏—Å—Ç–µ–º–æ–π.")
