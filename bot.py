#!/usr/bin/env python3
# ============================================================================
# Flat-Liner v10.0 ‚Ä¢ 16 Jul 2025
# ============================================================================
# ‚Ä¢ –°–¢–†–ê–¢–ï–ì–ò–Ø: –§–ª—ç—Ç–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è 'Flat_BB_Fade' —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ ADX
# ‚Ä¢ –ë–ò–†–ñ–ê: HTX (Huobi)
# ‚Ä¢ –ê–í–¢–û–¢–†–ï–ô–î–ò–ù–ì: –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
# ‚Ä¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï v10.0:
#   - [–§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï] –ë–æ—Ç –ø–µ—Ä–µ–ø–∏—Å–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å HTX, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ
#     –æ–±–æ–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–µ–π ccxt –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ.
# ============================================================================

import os
import json
import logging
import asyncio
from datetime import datetime, timezone, timedelta

import numpy as np
import pandas as pd
import ccxt.async_support as ccxt
import pandas_ta as ta
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Bot, Update
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, ContextTypes
)

# ‚îÄ‚îÄ ENV: –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# --- Telegram & Pair ---
BOT_TOKEN     = os.getenv("BOT_TOKEN")
CHAT_IDS_RAW  = os.getenv("CHAT_IDS", "")
# –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HTX –¥–ª—è USDT-—Ñ—å—é—á–µ—Ä—Å–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä 'BTC/USDT:USDT'
PAIR_SYMBOL   = os.getenv("PAIR_SYMBOL", "BTC/USDT:USDT")
TIMEFRAME     = os.getenv("TIMEFRAME", "5m")
STRAT_VERSION = "v10_0_flatliner_htx"
SHEET_ID      = os.getenv("SHEET_ID")


# --- HTX (Huobi) API ---
HTX_ACCESS_KEY = os.getenv("HTX_Access_Key") # –ò–º—è –∫–∞–∫ –Ω–∞ –≤–∞—à–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
HTX_SECRET_KEY = os.getenv("HTX_SECRET_KEY") # –ò–º—è –∫–∞–∫ –Ω–∞ –≤–∞—à–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
# –î–ª—è –¥–µ–º–æ-—Ç–æ—Ä–≥–æ–≤–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ '1', –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π - '0'
DEMO_MODE      = os.getenv("DEMO_MODE", "1")

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ---
DEFAULT_DEPOSIT_USD = float(os.getenv("DEFAULT_DEPOSIT_USD", "50.0"))
DEFAULT_LEVERAGE    = float(os.getenv("DEFAULT_LEVERAGE", "75.0")) # –ú–∞–∫—Å. –ø–ª–µ—á–æ –Ω–∞ HTX
FLAT_RR_RATIO       = float(os.getenv("FLAT_RR_RATIO", "1.0"))
FLAT_SL_PCT         = float(os.getenv("FLAT_SL_PCT", "0.10"))
FLAT_RSI_OVERSOLD   = float(os.getenv("FLAT_RSI_OVERSOLD", "35"))
FLAT_RSI_OVERBOUGHT = float(os.getenv("FLAT_RSI_OVERBOUGHT", "65"))
REPORT_TIME_UTC     = os.getenv("REPORT_TIME_UTC", "21:00")


# ‚îÄ‚îÄ –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(level=logging.INFO, format="%(asctime)s  %(levelname)-8s  %(message)s")
log = logging.getLogger(STRAT_VERSION)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
if not all([BOT_TOKEN, CHAT_IDS_RAW, HTX_ACCESS_KEY, HTX_SECRET_KEY]):
    log.critical("–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (BOT_TOKEN, CHAT_IDS, HTX API) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"); raise SystemExit

CHAT_IDS = {int(cid) for cid in CHAT_IDS_RAW.split(",") if cid.strip()}

# ‚îÄ‚îÄ GOOGLE SHEETS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TRADE_LOG_WS = None
def setup_google_sheets() -> None:
    # ... (–≠—Ç–æ—Ç –±–ª–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    pass

# ‚îÄ‚îÄ –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ï–ú ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
STATE_FILE = f"state_{STRAT_VERSION}_{PAIR_SYMBOL.replace('/','').replace(':','')}.json"
state = {"monitoring": False, "active_trade": None, "leverage": DEFAULT_LEVERAGE, "deposit_usd": DEFAULT_DEPOSIT_USD, "dynamic_adx_threshold": 25.0, "last_adx_recalc_time": None, "daily_report_data": []}
# ... (–≠—Ç–æ—Ç –±–ª–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
def save_state():
    with open(STATE_FILE, 'w') as f: json.dump(state, f, indent=2)

def load_state():
    global state
    if os.path.exists(STATE_FILE):
        try:
            with open(STATE_FILE, 'r') as f: state.update(json.load(f))
            log.info("–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        except (json.JSONDecodeError, TypeError):
            log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π."); save_state()
    else:
        save_state(); log.info("–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.")

# ‚îÄ‚îÄ –ò–ù–î–ò–ö–ê–¢–û–†–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
RSI_LEN, BBANDS_LEN, ADX_LEN = 14, 20, 14
def add_indicators(df: pd.DataFrame) -> pd.DataFrame:
    df.ta.rsi(length=RSI_LEN, append=True, col_names=(f"RSI_{RSI_LEN}",))
    df.ta.adx(length=ADX_LEN, append=True, col_names=(f"ADX_{ADX_LEN}", "DMP", "DMN"))
    df.ta.bbands(length=BBANDS_LEN, std=2, append=True, col_names=(f"BBL_{BBANDS_LEN}_2.0", f"BBM_{BBANDS_LEN}_2.0", f"BBU_{BBANDS_LEN}_2.0", f"BBB_{BBANDS_LEN}_2.0", f"BBP_{BBANDS_LEN}_2.0"))
    return df.dropna()

# ‚îÄ‚îÄ –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï –° –ë–ò–†–ñ–ï–ô (HTX) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def initialize_exchange():
    try:
        exchange = ccxt.htx({
            'apiKey': HTX_ACCESS_KEY,
            'secret': HTX_SECRET_KEY,
            'options': {'defaultType': 'swap'},
        })
        exchange.set_sandbox_mode(DEMO_MODE == '1')
        await exchange.load_markets()
        log.info(f"–ë–∏—Ä–∂–∞ HTX –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –î–µ–º–æ-—Ä–µ–∂–∏–º: {'–í–ö–õ–Æ–ß–ï–ù' if DEMO_MODE == '1' else '–í–´–ö–õ–Æ–ß–ï–ù'}.")
        return exchange
    except Exception as e:
        log.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏—Ä–∂–∏: {e}")
        return None

async def set_leverage_on_exchange(exchange, symbol, leverage):
    try:
        await exchange.set_leverage(leverage, symbol)
        log.info(f"–ù–∞ –±–∏—Ä–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–ª–µ—á–æ {leverage}x –¥–ª—è {symbol}")
        return True
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞ –Ω–∞ –±–∏—Ä–∂–µ: {e}")
        return False

async def execute_trade(exchange, signal: dict):
    side = signal['side']
    deposit = signal['deposit_usd']
    leverage = signal['leverage']
    entry_price = signal['entry_price']
    sl_price = signal['sl_price']
    tp_price = signal['tp_price']
    
    try:
        market = exchange.markets[PAIR_SYMBOL]
        position_value_usd = deposit * leverage
        amount_in_contracts = position_value_usd / float(market['contractSize'])
        amount = exchange.amount_to_precision(PAIR_SYMBOL, amount_in_contracts)
        log.info(f"–†–∞—Å—á–µ—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞: {amount} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")

        params = {
            'sl_price': sl_price,
            'tp_price': tp_price,
        }
        
        log.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä: {side} {amount} {PAIR_SYMBOL} –ø–æ —Ä—ã–Ω–∫—É —Å SL/TP.")
        order = await exchange.create_order(symbol=PAIR_SYMBOL, type='market', side=side.lower(), amount=amount, params=params)
        
        log.info(f"–û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω! ID: {order['id']}")
        await notify_all(f"‚úÖ <b>–û–†–î–ï–† –†–ê–ó–ú–ï–©–ï–ù</b>\n\n<b>ID:</b> {order['id']}\n<b>SL:</b> {sl_price}\n<b>TP:</b> {tp_price}")
        return order['id']

    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
        await notify_all(f"üî¥ –û–®–ò–ë–ö–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –û–†–î–ï–†–ê\n\n<b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> {PAIR_SYMBOL}\n<b>–¢–∏–ø:</b> {side}\n<b>–û—à–∏–±–∫–∞:</b> <code>{e}</code>")
        return None

# ... (–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ monitor, daily_reporter, –∏ –∫–æ–º–∞–Ω–¥—ã Telegram, –æ—Å—Ç–∞—é—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–∞–∫–∏–º–∏ –∂–µ) ...
async def monitor(app: Application):
    exchange = await initialize_exchange()
    if not exchange:
        await notify_all("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏—Ä–∂—É. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", app.bot); return
    
    # –ù–∞ HTX –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ API, –æ–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ
    if not await set_leverage_on_exchange(exchange, PAIR_SYMBOL, state['leverage']):
        await notify_all("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", app.bot); await exchange.close(); return

    log.info("üöÄ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω: %s %s (%s)", PAIR_SYMBOL, TIMEFRAME, STRAT_VERSION)
    
    while state.get("monitoring", False):
        try:
            if state.get("active_trade"):
                positions = await exchange.fetch_positions([PAIR_SYMBOL])
                active_position = next((p for p in positions if float(p.get('contracts', 0)) != 0), None)
                if not active_position:
                    log.info("–ê–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
                    state["active_trade"] = None
                    save_state()
                await asyncio.sleep(60)
                continue

            ohlcv = await exchange.fetch_ohlcv(PAIR_SYMBOL, timeframe=TIMEFRAME, limit=100)
            df = add_indicators(pd.DataFrame(ohlcv, columns=["ts", "open", "high", "low", "close", "volume"]))
            if len(df) < 2: await asyncio.sleep(60); continue

            last = df.iloc[-1]
            price = last["close"]
            side = None
            if price <= last[f"BBL_{BBANDS_LEN}_2.0"] and last[f"RSI_{RSI_LEN}"] < FLAT_RSI_OVERSOLD: side = "BUY"
            elif price >= last[f"BBU_{BBANDS_LEN}_2.0"] and last[f"RSI_{RSI_LEN}"] > FLAT_RSI_OVERBOUGHT: side = "SELL"

            if side:
                sl_pct = FLAT_SL_PCT
                tp_pct = sl_pct * FLAT_RR_RATIO
                sl_price = price * (1 - sl_pct / 100) if side == "BUY" else price * (1 + sl_pct / 100)
                tp_price = price * (1 + tp_pct / 100) if side == "BUY" else price * (1 - tp_pct / 100)
                
                signal = {
                    "side": side, "entry_price": price, "sl_price": sl_price,
                    "tp_price": tp_price, "deposit_usd": state['deposit_usd'], "leverage": state['leverage'],
                }
                await notify_all(f"üîî <b>–ü–û–õ–£–ß–ï–ù –°–ò–ì–ù–ê–õ: {side}</b>\n\n<b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> {PAIR_SYMBOL}\n<b>–¶–µ–Ω–∞:</b> {price:.4f}\n<b>–î–µ–ø–æ–∑–∏—Ç:</b> {state['deposit_usd']}$ | <b>–ü–ª–µ—á–æ:</b> {state['leverage']}x\n\n–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂—É...", app.bot)
                order_id = await execute_trade(exchange, signal)
                if order_id:
                    signal['id'] = order_id
                    state["active_trade"] = signal
                    save_state()
        
        except ccxt.NetworkError as e:
            log.warning("CCXT –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏: %s", e)
        except Exception as e:
            log.exception("–°–±–æ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ:")
        
        await asyncio.sleep(60)

    await exchange.close()
    log.info("‚õîÔ∏è –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# ‚îÄ‚îÄ –ö–û–ú–ê–ù–î–´ TELEGRAM ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start_command(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    CHAT_IDS.add(update.effective_chat.id)
    if not state.get("monitoring"):
        state["monitoring"] = True; save_state()
        await update.message.reply_text(f"‚úÖ –ë–æ—Ç <b>{STRAT_VERSION}</b> –∑–∞–ø—É—â–µ–Ω.", parse_mode="HTML")
        asyncio.create_task(monitor(ctx.application))
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")

async def stop_command(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    state["monitoring"] = False; save_state()
    await update.message.reply_text("‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

async def status_command(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    status_msg = f"<b>–°–¢–ê–¢–£–° –ë–û–¢–ê ({STRAT_VERSION})</b>\n\n"
    status_msg += f"<b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b> {'–ê–ö–¢–ò–í–ï–ù' if state.get('monitoring') else '–û–°–¢–ê–ù–û–í–õ–ï–ù'}\n"
    status_msg += f"<b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> {PAIR_SYMBOL}\n"
    status_msg += f"<b>–î–µ–ø–æ–∑–∏—Ç:</b> {state['deposit_usd']:.2f}$\n<b>–ü–ª–µ—á–æ:</b> {state['leverage']}x\n"
    if trade := state.get("active_trade"):
        status_msg += f"<b>–ê–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞ (ID):</b> {trade['id']}"
    else:
        status_msg += "<i>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.</i>"
    await update.message.reply_text(status_msg, parse_mode="HTML")

async def set_deposit_command(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try:
        deposit = float(ctx.args[0])
        if deposit <= 0: raise ValueError
        state['deposit_usd'] = deposit; save_state()
        await update.message.reply_text(f"‚úÖ –î–µ–ø–æ–∑–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{deposit:.2f}$</b>", parse_mode="HTML")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /set_deposit <—Å—É–º–º–∞>")

async def set_leverage_command(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try:
        leverage = int(ctx.args[0])
        if not 1 <= leverage <= 75: raise ValueError
        exchange = await initialize_exchange()
        if not exchange:
            await update.message.reply_text("üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ."); return
        if await set_leverage_on_exchange(exchange, PAIR_SYMBOL, leverage):
            state['leverage'] = leverage; save_state()
            await update.message.reply_text(f"‚úÖ –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{leverage}x</b>", parse_mode="HTML")
        else:
            await update.message.reply_text("üî¥ –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞.")
        await exchange.close()
    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /set_leverage <1-75>")

async def test_trade_command(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è HTX –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def apitest_command(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚öôÔ∏è <b>–ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç API –∫–ª—é—á–µ–π HTX...</b>", parse_mode="HTML")
    exchange = None
    try:
        if not HTX_ACCESS_KEY or not HTX_SECRET_KEY:
            await update.message.reply_text("üî¥ API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.", parse_mode="HTML"); return

        exchange = ccxt.htx({'apiKey': HTX_ACCESS_KEY, 'secret': HTX_SECRET_KEY})
        exchange.set_sandbox_mode(DEMO_MODE == '1')

        await update.message.reply_text("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞...", parse_mode="HTML")
        balance = await exchange.fetch_balance(params={'type': 'swap'})
        
        await update.message.reply_text(f"‚úÖ <b>–£–°–ü–ï–•!</b>\n–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ HTX –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.\n\n"
                                        f"<b>–ë–∞–ª–∞–Ω—Å USDT –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö:</b> <code>{balance.get('USDT', {'total': '–ù–µ –Ω–∞–π–¥–µ–Ω'})['total']}</code>",
                                        parse_mode="HTML")
    except ccxt.AuthenticationError as e:
        await update.message.reply_text(f"‚ùå <b>–û–®–ò–ë–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò!</b>\n<code>{e}</code>", parse_mode="HTML")
    except Exception as e:
        log.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /apitest: {e}")
        await update.message.reply_text(f"üî¥ <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞:</b>\n<code>{e}</code>", parse_mode="HTML")
    finally:
        if exchange: await exchange.close()

async def post_init(app: Application):
    load_state()
    log.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    await notify_all(f"‚úÖ –ë–æ—Ç <b>{STRAT_VERSION}</b> –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.", bot=app.bot)
    if state.get("monitoring"):
        log.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, –∑–∞–ø—É—Å–∫–∞—é –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª...")
        asyncio.create_task(monitor(app))

if __name__ == "__main__":
    app = (ApplicationBuilder().token(BOT_TOKEN).post_init(post_init).build())
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("stop", stop_command))
    app.add_handler(CommandHandler("status", status_command))
    app.add_handler(CommandHandler("set_deposit", set_deposit_command))
    app.add_handler(CommandHandler("set_leverage", set_leverage_command))
    app.add_handler(CommandHandler("test_trade", test_trade_command))
    app.add_handler(CommandHandler("apitest", apitest_command))
    log.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app.run_polling()
