#!/usr/bin/env python3
# ============================================================================
# v6.0 - –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (LONG/SHORT) —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
# ============================================================================

import os
import asyncio
import json
import logging
from datetime import datetime, timezone
import numpy as np
import pandas as pd
import ccxt.async_support as ccxt
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, Bot
from telegram.ext import Application, ApplicationBuilder, CommandHandler, ContextTypes

# === ENV / Logging ===
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_IDS_RAW = os.getenv("CHAT_IDS", "")
SHEET_ID = os.getenv("SHEET_ID")
# –¢–µ–ø–µ—Ä—å —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –∑–∞–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PAIR
PAIR_RAW = os.getenv("PAIR", "BTC/USDT")
TIMEFRAME = os.getenv("TIMEFRAME", "1h")

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
log = logging.getLogger(__name__)

if not BOT_TOKEN:
    log.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
    exit()

CHAT_IDS = {int(cid.strip()) for cid in CHAT_IDS_RAW.split(",") if cid.strip()}
if not CHAT_IDS:
    log.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è CHAT_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –Ω–∞–ø–∏—à–µ—Ç /start.")

# === GOOGLE SHEETS (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ===
LOGS_WS = None
try:
    creds_json_string = os.getenv("GOOGLE_CREDENTIALS")
    if creds_json_string and SHEET_ID:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds_dict = json.loads(creds_json_string)
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        gs = gspread.authorize(creds)
        LOGS_WS = gs.open_by_key(SHEET_ID).worksheet("LP_Logs")
        HEADERS = ["–î–∞—Ç–∞-–≤—Ä–µ–º—è", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–î–µ–ø–æ–∑–∏—Ç", "–í—Ö–æ–¥", "Stop Loss", "Take Profit", "RR", "P&L —Å–¥–µ–ª–∫–∏ (USDT)", "–ü—Ä–∏–±—ã–ª—å –∫ –¥–µ–ø–æ–∑–∏—Ç—É (%)"]
        if LOGS_WS.row_values(1) != HEADERS:
            LOGS_WS.resize(rows=1); LOGS_WS.update('A1', [HEADERS])
        log.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets.")
    else:
        log.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Google Sheets –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
except Exception as e:
    log.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
    LOGS_WS = None

# === STATE MANAGEMENT ===
STATE_FILE = "advanced_signal_state_v2.json"
state = {
    "monitoring": False,
    "active_signal": None,      # –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ {side, price, next_target_pct, next_anti_target_pct}
    "preliminary_signal": None  # –î–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ {side}
}

def save_state():
    try:
        with open(STATE_FILE, 'w') as f:
            json.dump(state, f, indent=2)
    except Exception as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}")

def load_state():
    global state
    if os.path.exists(STATE_FILE):
        try:
            with open(STATE_FILE, 'r') as f:
                loaded_state = json.load(f)
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ –µ—Å—Ç—å
                state.update(loaded_state)
            log.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {state}")
        except Exception as e:
            log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}")

# === EXCHANGE & STRATEGY PARAMS ===
exchange = ccxt.mexc()
PAIR = PAIR_RAW.upper()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
RSI_LEN = 14
EMA_FAST_LEN, EMA_SLOW_LEN = 9, 21
RSI_LONG_ENTRY, RSI_SHORT_ENTRY = 52, 48
PRICE_CHANGE_STEP_PCT = 0.1
ANTI_TARGET_STEP_PCT = 0.05 # –®–∞–≥ –¥–ª—è –∞–Ω—Ç–∏-—Ü–µ–ª–µ–π

# === INDICATORS ===
def _ta_rsi(series: pd.Series, length=14):
    delta = series.diff()
    gain = delta.clip(lower=0).rolling(window=length, min_periods=length).mean()
    loss = (-delta.clip(upper=0)).rolling(window=length, min_periods=length).mean()
    if loss.empty or loss.iloc[-1] == 0: return pd.Series(100, index=series.index)
    rs = gain / loss
    return 100 - (100 / (1 + rs))

def calculate_indicators(df: pd.DataFrame):
    df['ema_fast'] = df['close'].ewm(span=EMA_FAST_LEN, adjust=False).mean()
    df['ema_slow'] = df['close'].ewm(span=EMA_SLOW_LEN, adjust=False).mean()
    df['rsi'] = _ta_rsi(df['close'], RSI_LEN)
    return df.dropna()

# === CORE FUNCTIONS ===
async def broadcast_message(bot: Bot, text: str):
    if not CHAT_IDS:
        log.warning("–°–ø–∏—Å–æ–∫ CHAT_IDS –ø—É—Å—Ç. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    log.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {len(CHAT_IDS)} —á–∞—Ç–æ–≤: \"{text}\"")
    for chat_id in CHAT_IDS:
        try:
            await bot.send_message(chat_id=chat_id, text=text)
        except Exception as e:
            log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")

async def monitor_loop(app: Application):
    log.info(f"–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω –¥–ª—è {PAIR} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {TIMEFRAME}.")
    while state.get('monitoring', False):
        try:
            ohlcv = await exchange.fetch_ohlcv(PAIR, timeframe=TIMEFRAME, limit=100)
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df = calculate_indicators(df.copy())
            
            if len(df) < 2:
                await asyncio.sleep(30)
                continue

            last = df.iloc[-1]
            prev = df.iloc[-2]
            price = last['close']

            # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è LONG –∏ SHORT ---
            long_conditions = {
                "rsi": last['rsi'] > RSI_LONG_ENTRY,
                "price_pos": price > last['ema_fast'] and price > last['ema_slow'],
                "cross": prev['ema_fast'] < prev['ema_slow'] and last['ema_fast'] > last['ema_slow']
            }
            short_conditions = {
                "rsi": last['rsi'] < RSI_SHORT_ENTRY,
                "price_pos": price < last['ema_fast'] and price < last['ema_slow'],
                "cross": prev['ema_fast'] > prev['ema_slow'] and last['ema_fast'] < last['ema_slow']
            }

            # --- 1. –õ–û–ì–ò–ö–ê –ê–ö–¢–ò–í–ù–û–ì–û –°–ò–ì–ù–ê–õ–ê ---
            if active_signal := state.get('active_signal'):
                side = active_signal['side']
                entry_price = active_signal['price']
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–∏–≥–Ω–∞–ª–∞
                cancel = False
                if side == "LONG" and (last['rsi'] < RSI_SHORT_ENTRY or price < last['ema_slow']):
                    cancel = True
                elif side == "SHORT" and (last['rsi'] > RSI_LONG_ENTRY or price > last['ema_slow']):
                    cancel = True
                
                if cancel:
                    await broadcast_message(app.bot, f"‚ö†Ô∏è –û–¢–ú–ï–ù–ê —Å–∏–≥–Ω–∞–ª–∞ {side} –ø–æ {PAIR}.")
                    state['active_signal'] = None
                    save_state()
                    continue

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–π –∏ –∞–Ω—Ç–∏-—Ü–µ–ª–µ–π
                price_change_pct = ((price - entry_price) / entry_price) * 100
                
                # –î–ª—è LONG
                if side == "LONG":
                    if price_change_pct >= active_signal['next_target_pct']:
                        await broadcast_message(app.bot, f"üéØ –¶–ï–õ–¨ +{active_signal['next_target_pct']:.2f}% –ø–æ {PAIR} ({side}) –î–û–°–¢–ò–ì–ù–£–¢–ê. –¶–µ–Ω–∞: {price:.4f}")
                        state['active_signal']['next_target_pct'] += PRICE_CHANGE_STEP_PCT
                        save_state()
                    elif price_change_pct <= active_signal['next_anti_target_pct']:
                        await broadcast_message(app.bot, f"üìâ –ê–ù–¢–ò-–¶–ï–õ–¨ {active_signal['next_anti_target_pct']:.2f}% –ø–æ {PAIR} ({side}). –í–ù–ò–ú–ê–ù–ò–ï! –¶–µ–Ω–∞: {price:.4f}")
                        state['active_signal']['next_anti_target_pct'] -= ANTI_TARGET_STEP_PCT
                        save_state()
                # –î–ª—è SHORT
                elif side == "SHORT":
                    if price_change_pct <= -active_signal['next_target_pct']:
                        await broadcast_message(app.bot, f"üéØ –¶–ï–õ–¨ +{active_signal['next_target_pct']:.2f}% –ø–æ {PAIR} ({side}) –î–û–°–¢–ò–ì–ù–£–¢–ê. –¶–µ–Ω–∞: {price:.4f}")
                        state['active_signal']['next_target_pct'] += PRICE_CHANGE_STEP_PCT
                        save_state()
                    elif price_change_pct >= -active_signal['next_anti_target_pct']:
                         await broadcast_message(app.bot, f"üìà –ê–ù–¢–ò-–¶–ï–õ–¨ {active_signal['next_anti_target_pct']:.2f}% –ø–æ {PAIR} ({side}). –í–ù–ò–ú–ê–ù–ò–ï! –¶–µ–Ω–∞: {price:.4f}")
                         state['active_signal']['next_anti_target_pct'] -= ANTI_TARGET_STEP_PCT
                         save_state()

            # --- 2. –õ–û–ì–ò–ö–ê –ü–û–ò–°–ö–ê –ù–û–í–û–ì–û –°–ò–ì–ù–ê–õ–ê ---
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
                if long_conditions["cross"]:
                    if long_conditions["rsi"] and long_conditions["price_pos"]:
                        # –í—Å–µ —É—Å–ª–æ–≤–∏—è —Å–æ–≤–ø–∞–ª–∏ -> –ê–ö–¢–ò–í–ù–´–ô –°–ò–ì–ù–ê–õ
                        state['active_signal'] = {"side": "LONG", "price": price, "next_target_pct": PRICE_CHANGE_STEP_PCT, "next_anti_target_pct": -ANTI_TARGET_STEP_PCT}
                        state['preliminary_signal'] = None
                        await broadcast_message(app.bot, f"‚úÖ –°–ò–ì–ù–ê–õ LONG –ø–æ {PAIR}! –¶–µ–Ω–∞: {price:.4f}")
                    else:
                        # –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ -> –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ
                        state['preliminary_signal'] = {"side": "LONG"}
                        await broadcast_message(app.bot, f"‚è≥ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª LONG –ø–æ {PAIR}. –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è RSI –∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è —Ü–µ–Ω—ã.")
                    save_state()
                    continue

                if short_conditions["cross"]:
                    if short_conditions["rsi"] and short_conditions["price_pos"]:
                        state['active_signal'] = {"side": "SHORT", "price": price, "next_target_pct": PRICE_CHANGE_STEP_PCT, "next_anti_target_pct": -ANTI_TARGET_STEP_PCT}
                        state['preliminary_signal'] = None
                        await broadcast_message(app.bot, f"‚úÖ –°–ò–ì–ù–ê–õ SHORT –ø–æ {PAIR}! –¶–µ–Ω–∞: {price:.4f}")
                    else:
                        state['preliminary_signal'] = {"side": "SHORT"}
                        await broadcast_message(app.bot, f"‚è≥ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª SHORT –ø–æ {PAIR}. –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è RSI –∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è —Ü–µ–Ω—ã.")
                    save_state()
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª—Å—è –ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                if preliminary_signal := state.get('preliminary_signal'):
                    side = preliminary_signal['side']
                    if side == "LONG" and long_conditions["rsi"] and long_conditions["price_pos"]:
                        state['active_signal'] = {"side": "LONG", "price": price, "next_target_pct": PRICE_CHANGE_STEP_PCT, "next_anti_target_pct": -ANTI_TARGET_STEP_PCT}
                        state['preliminary_signal'] = None
                        await broadcast_message(app.bot, f"‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï —Å–∏–≥–Ω–∞–ª–∞ LONG –ø–æ {PAIR}! –¶–µ–Ω–∞: {price:.4f}")
                        save_state()
                    elif side == "SHORT" and short_conditions["rsi"] and short_conditions["price_pos"]:
                        state['active_signal'] = {"side": "SHORT", "price": price, "next_target_pct": PRICE_CHANGE_STEP_PCT, "next_anti_target_pct": -ANTI_TARGET_STEP_PCT}
                        state['preliminary_signal'] = None
                        await broadcast_message(app.bot, f"‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï —Å–∏–≥–Ω–∞–ª–∞ SHORT –ø–æ {PAIR}! –¶–µ–Ω–∞: {price:.4f}")
                        save_state()

        except ccxt.NetworkError as e:
            log.warning(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ CCXT: {e}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥.")
            await asyncio.sleep(60)
        except Exception as e:
            log.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}", exc_info=True)
            await asyncio.sleep(30)
        
        await asyncio.sleep(30) # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
    log.info("–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# === COMMANDS & LIFECYCLE ===
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in CHAT_IDS:
        CHAT_IDS.add(chat_id)
        log.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π CHAT_ID –¥–æ–±–∞–≤–ª–µ–Ω: {chat_id}.")
    if not state.get('monitoring'):
        state['monitoring'] = True
        save_state()
        await update.message.reply_text(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ –ø–∞—Ä–µ {PAIR} ({TIMEFRAME}) –∑–∞–ø—É—â–µ–Ω.")
        asyncio.create_task(monitor_loop(ctx.application))
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.")

async def cmd_stop(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if state.get('monitoring'):
        state['monitoring'] = False
        save_state()
        await update.message.reply_text("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.")

async def cmd_status(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not state['monitoring']:
        await update.message.reply_text(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ {PAIR} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
        return
    
    msg = f"–°—Ç–∞—Ç—É—Å –ø–æ {PAIR} ({TIMEFRAME}):\n"
    if active_signal := state.get('active_signal'):
        side = active_signal['side']
        price = active_signal['price']
        next_target = active_signal['next_target_pct']
        next_anti = active_signal['next_anti_target_pct']
        msg += f"\n- –ê–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {side}\n- –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {price:.4f}\n- –°–ª–µ–¥—É—é—â–∞—è —Ü–µ–ª—å: +{next_target:.2f}%\n- –°–ª–µ–¥—É—é—â–∞—è –∞–Ω—Ç–∏-—Ü–µ–ª—å: {next_anti:.2f}%"
    elif preliminary_signal := state.get('preliminary_signal'):
        side = preliminary_signal['side']
        msg += f"\n- –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {side}\n- –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç RSI –∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è —Ü–µ–Ω—ã."
    else:
        msg += "\n- –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç. –ò–¥—ë—Ç –ø–æ–∏—Å–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è EMA."
        
    await update.message.reply_text(msg)

async def post_init(app: Application):
    load_state()
    if state.get('monitoring'):
        log.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        asyncio.create_task(monitor_loop(app))

async def on_shutdown(app: Application):
    log.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    save_state()
    await exchange.close()
    log.info("–°–µ—Å—Å–∏—è —Å –±–∏—Ä–∂–µ–π –∑–∞–∫—Ä—ã—Ç–∞.")

def main():
    log.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app = ApplicationBuilder().token(BOT_TOKEN).post_init(post_init).post_shutdown(on_shutdown).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("stop", cmd_stop))
    app.add_handler(CommandHandler("status", cmd_status))
    app.run_polling()

if __name__ == "__main__":
    main()
