#!/usr/bin/env python3
# ============================================================================
# v8.0 - –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
# ============================================================================

import os
import asyncio
import json
import logging
import re
from datetime import datetime, timezone
import numpy as np
import pandas as pd
import ccxt.async_support as ccxt
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, Bot
from telegram.ext import Application, ApplicationBuilder, CommandHandler, ContextTypes

# === ENV / Logging ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_IDS_RAW = os.getenv("CHAT_IDS", "")
SHEET_ID = os.getenv("SHEET_ID")
PAIR_RAW = os.getenv("PAIR", "BTC/USDT")
TIMEFRAME = os.getenv("TIMEFRAME", "1h")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
log = logging.getLogger(__name__)
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ httpcore, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–π —Å–ø–∞–º –≤ –ª–æ–≥–∞—Ö
logging.getLogger("httpcore").setLevel(logging.WARNING)


if not BOT_TOKEN:
    log.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    exit()

if not re.match(r'^\d+[mhdM]$', TIMEFRAME):
    log.critical(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞: '{TIMEFRAME}'. –ü—Ä–∏–º–µ—Ä: 1h, 15m, 1d.")
    exit()

CHAT_IDS = {int(cid.strip()) for cid in CHAT_IDS_RAW.split(",") if cid.strip()}
if not CHAT_IDS:
    log.warning("CHAT_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–¥—É—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –Ω–∞–ø–∏—à–µ—Ç /start.")

# === STATE MANAGEMENT ===
STATE_FILE = "advanced_signal_state_v4.json"
state = {
    "monitoring": False,
    "active_signal": None,
    "preliminary_signal": None
}

def save_state():
    try:
        with open(STATE_FILE, 'w') as f:
            json.dump(state, f, indent=2)
    except Exception as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}")

def load_state():
    global state
    if os.path.exists(STATE_FILE):
        try:
            with open(STATE_FILE, 'r') as f:
                loaded_state = json.load(f)
                state.update(loaded_state)
            log.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {state}")
        except Exception as e:
            log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}")

# === EXCHANGE & STRATEGY PARAMS ===
exchange = ccxt.mexc()
PAIR = PAIR_RAW.upper()

RSI_LEN = 14
EMA_FAST_LEN, EMA_SLOW_LEN = 9, 21
RSI_LONG_ENTRY, RSI_SHORT_ENTRY = 52, 48
PRICE_CHANGE_STEP_PCT = 0.1
ANTI_TARGET_STEP_PCT = 0.05

# === INDICATORS ===
def _ta_rsi(series: pd.Series, length=14):
    delta = series.diff()
    gain = delta.clip(lower=0).rolling(window=length, min_periods=length).mean()
    loss = (-delta.clip(upper=0)).rolling(window=length, min_periods=length).mean()
    if loss.empty or (loss_val := loss.iloc[-1]) == 0: return pd.Series(100, index=series.index)
    rs = gain.iloc[-1] / loss_val
    return 100 - (100 / (1 + rs))

def calculate_indicators(df: pd.DataFrame):
    df['ema_fast'] = df['close'].ewm(span=EMA_FAST_LEN, adjust=False).mean()
    df['ema_slow'] = df['close'].ewm(span=EMA_SLOW_LEN, adjust=False).mean()
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç RSI –∫–æ –≤—Å–µ–º—É —Å—Ç–æ–ª–±—Ü—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å –æ–¥–∏–Ω–æ—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    df['rsi'] = df['close'].rolling(window=RSI_LEN + 1).apply(lambda x: _ta_rsi(x, RSI_LEN), raw=False)
    return df.dropna()

# === CORE FUNCTIONS ===
async def broadcast_message(bot: Bot, text: str):
    if not CHAT_IDS:
        log.warning("–°–ø–∏—Å–æ–∫ CHAT_IDS –ø—É—Å—Ç. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    log.info(f"–û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø -> {text}")
    for chat_id in CHAT_IDS:
        try:
            await bot.send_message(chat_id=chat_id, text=text)
        except Exception as e:
            log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")

async def monitor_loop(app: Application):
    log.info(f"–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω –¥–ª—è {PAIR} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {TIMEFRAME}.")
    while state.get('monitoring', False):
        try:
            ohlcv = await exchange.fetch_ohlcv(PAIR, timeframe=TIMEFRAME, limit=100)
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df = calculate_indicators(df.copy())
            
            if len(df) < 2:
                await asyncio.sleep(30)
                continue

            last = df.iloc[-1]
            prev = df.iloc[-2]
            price = last['close']

            # --- –ù–û–í–ò–ù–ö–ê: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ---
            log.info(f"[–û–¢–õ–ê–î–ö–ê] –¶–µ–Ω–∞: {price:.4f}, RSI: {last['rsi']:.2f}, EMA_fast: {last['ema_fast']:.4f}, EMA_slow: {last['ema_slow']:.4f}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
            is_bull_cross = last['ema_fast'] > last['ema_slow']
            was_bull_cross = prev['ema_fast'] > prev['ema_slow']

            long_conditions = {
                "rsi": last['rsi'] > RSI_LONG_ENTRY,
                "price_pos": price > last['ema_fast'] and price > last['ema_slow']
            }
            short_conditions = {
                "rsi": last['rsi'] < RSI_SHORT_ENTRY,
                "price_pos": price < last['ema_fast'] and price < last['ema_slow']
            }

            # --- 1. –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ö–¢–ò–í–ù–´–ú –°–ò–ì–ù–ê–õ–û–ú ---
            if active_signal := state.get('active_signal'):
                # ... (—ç—Ç–æ—Ç –±–ª–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                side = active_signal['side']
                entry_price = active_signal['price']
                
                cancel = False
                if side == "LONG" and (last['rsi'] < RSI_SHORT_ENTRY or price < last['ema_slow']):
                    cancel = True
                elif side == "SHORT" and (last['rsi'] > RSI_LONG_ENTRY or price > last['ema_slow']):
                    cancel = True
                
                if cancel:
                    await broadcast_message(app.bot, f"‚ö†Ô∏è –û–¢–ú–ï–ù–ê —Å–∏–≥–Ω–∞–ª–∞ {side} –ø–æ {PAIR}.")
                    state['active_signal'] = None
                    save_state()
                    continue

                price_change_pct = ((price - entry_price) / entry_price) * 100
                
                if side == "LONG":
                    if price_change_pct >= active_signal['next_target_pct']:
                        await broadcast_message(app.bot, f"üéØ –¶–ï–õ–¨ +{active_signal['next_target_pct']:.2f}% –ø–æ {PAIR} ({side}) –î–û–°–¢–ò–ì–ù–£–¢–ê. –¶–µ–Ω–∞: {price:.4f}")
                        state['active_signal']['next_target_pct'] += PRICE_CHANGE_STEP_PCT
                        save_state()
                    elif price_change_pct <= active_signal['next_anti_target_pct']:
                        await broadcast_message(app.bot, f"üìâ –ê–ù–¢–ò-–¶–ï–õ–¨ {active_signal['next_anti_target_pct']:.2f}% –ø–æ {PAIR} ({side}). –í–ù–ò–ú–ê–ù–ò–ï! –¶–µ–Ω–∞: {price:.4f}")
                        state['active_signal']['next_anti_target_pct'] -= ANTI_TARGET_STEP_PCT
                        save_state()
                elif side == "SHORT":
                    if price_change_pct <= -active_signal['next_target_pct']:
                        await broadcast_message(app.bot, f"üéØ –¶–ï–õ–¨ +{active_signal['next_target_pct']:.2f}% –ø–æ {PAIR} ({side}) –î–û–°–¢–ò–ì–ù–£–¢–ê. –¶–µ–Ω–∞: {price:.4f}")
                        state['active_signal']['next_target_pct'] += PRICE_CHANGE_STEP_PCT
                        save_state()
                    elif price_change_pct >= -active_signal['next_anti_target_pct']:
                         await broadcast_message(app.bot, f"üìà –ê–ù–¢–ò-–¶–ï–õ–¨ {active_signal['next_anti_target_pct']:.2f}% –ø–æ {PAIR} ({side}). –í–ù–ò–ú–ê–ù–ò–ï! –¶–µ–Ω–∞: {price:.4f}")
                         state['active_signal']['next_anti_target_pct'] -= ANTI_TARGET_STEP_PCT
                         save_state()
            
            # --- 2. –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ú –°–ò–ì–ù–ê–õ–û–ú ---
            elif preliminary_signal := state.get('preliminary_signal'):
                side = preliminary_signal['side']
                
                if side == "LONG" and long_conditions["rsi"] and long_conditions["price_pos"]:
                    state['active_signal'] = {"side": "LONG", "price": price, "next_target_pct": PRICE_CHANGE_STEP_PCT, "next_anti_target_pct": -ANTI_TARGET_STEP_PCT}
                    state['preliminary_signal'] = None
                    await broadcast_message(app.bot, f"‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï —Å–∏–≥–Ω–∞–ª–∞ LONG –ø–æ {PAIR}! –¶–µ–Ω–∞: {price:.4f}")
                    save_state()
                elif side == "SHORT" and short_conditions["rsi"] and short_conditions["price_pos"]:
                    state['active_signal'] = {"side": "SHORT", "price": price, "next_target_pct": PRICE_CHANGE_STEP_PCT, "next_anti_target_pct": -ANTI_TARGET_STEP_PCT}
                    state['preliminary_signal'] = None
                    await broadcast_message(app.bot, f"‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï —Å–∏–≥–Ω–∞–ª–∞ SHORT –ø–æ {PAIR}! –¶–µ–Ω–∞: {price:.4f}")
                    save_state()
                
                # –û—Ç–º–µ–Ω–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —É—à–ª–æ –≤ –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É
                elif (side == "LONG" and not is_bull_cross) or (side == "SHORT" and is_bull_cross):
                    await broadcast_message(app.bot, f"üö´ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª {side} –ø–æ {PAIR} –æ—Ç–º–µ–Ω—ë–Ω –∏–∑-–∑–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è.")
                    state['preliminary_signal'] = None
                    save_state()

            # --- 3. –ü–û–ò–°–ö –ù–û–í–û–ì–û –°–ò–ì–ù–ê–õ–ê ---
            else:
                # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê ---
                # –ò—â–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
                if is_bull_cross and not was_bull_cross: # –ü—Ä–æ–∏–∑–æ—à–µ–ª "–∑–æ–ª–æ—Ç–æ–π –∫—Ä–µ—Å—Ç"
                    state['preliminary_signal'] = {"side": "LONG"}
                    await broadcast_message(app.bot, f"‚è≥ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª LONG –ø–æ {PAIR}. –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
                    save_state()
                elif not is_bull_cross and was_bull_cross: # –ü—Ä–æ–∏–∑–æ—à–µ–ª "–∫—Ä–µ—Å—Ç —Å–º–µ—Ä—Ç–∏"
                    state['preliminary_signal'] = {"side": "SHORT"}
                    await broadcast_message(app.bot, f"‚è≥ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª SHORT –ø–æ {PAIR}. –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
                    save_state()

        except ccxt.NetworkError as e:
            log.warning(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ CCXT: {e}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥.")
            await asyncio.sleep(60)
        except Exception as e:
            log.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}", exc_info=True)
            await asyncio.sleep(30)
        
        await asyncio.sleep(30)
    log.info("–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# === COMMANDS & LIFECYCLE ===
# ... (—ç—Ç–æ—Ç –±–ª–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in CHAT_IDS:
        CHAT_IDS.add(chat_id)
        log.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π CHAT_ID –¥–æ–±–∞–≤–ª–µ–Ω: {chat_id}.")
    if not state.get('monitoring'):
        state['monitoring'] = True
        save_state()
        await update.message.reply_text(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ –ø–∞—Ä–µ {PAIR} ({TIMEFRAME}) –∑–∞–ø—É—â–µ–Ω.")
        asyncio.create_task(monitor_loop(ctx.application))
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.")

async def cmd_stop(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if state.get('monitoring'):
        state['monitoring'] = False
        save_state()
        await update.message.reply_text("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.")

async def cmd_status(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not state['monitoring']:
        await update.message.reply_text(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ {PAIR} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
        return
    
    msg = f"–°—Ç–∞—Ç—É—Å –ø–æ {PAIR} ({TIMEFRAME}):\n"
    if active_signal := state.get('active_signal'):
        side = active_signal['side']
        price = active_signal['price']
        next_target = active_signal['next_target_pct']
        next_anti = active_signal['next_anti_target_pct']
        msg += f"\n- –ê–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {side}\n- –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {price:.4f}\n- –°–ª–µ–¥—É—é—â–∞—è —Ü–µ–ª—å: +{next_target:.2f}%\n- –°–ª–µ–¥—É—é—â–∞—è –∞–Ω—Ç–∏-—Ü–µ–ª—å: {next_anti:.2f}%"
    elif preliminary_signal := state.get('preliminary_signal'):
        side = preliminary_signal['side']
        msg += f"\n- –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {side}\n- –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç RSI –∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è —Ü–µ–Ω—ã."
    else:
        msg += "\n- –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç. –ò–¥—ë—Ç –ø–æ–∏—Å–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è EMA."
        
    await update.message.reply_text(msg)

async def post_init(app: Application):
    load_state()
    if state.get('monitoring'):
        log.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        asyncio.create_task(monitor_loop(app))

async def on_shutdown(app: Application):
    log.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    save_state()
    await exchange.close()
    log.info("–°–µ—Å—Å–∏—è —Å –±–∏—Ä–∂–µ–π –∑–∞–∫—Ä—ã—Ç–∞.")

def main():
    log.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app = ApplicationBuilder().token(BOT_TOKEN).post_init(post_init).post_shutdown(on_shutdown).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("stop", cmd_stop))
    app.add_handler(CommandHandler("status", cmd_status))
    app.run_polling()

if __name__ == "__main__":
    main()
