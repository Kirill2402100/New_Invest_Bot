#!/usr/bin/env python3
# ============================================================================
# Trend Rider v3.0 ‚Ä¢ 10 Jul 2025
# ============================================================================
# ‚Ä¢ –°–¢–†–ê–¢–ï–ì–ò–Ø      : –¢—Ä–µ–Ω–¥–æ–≤–∞—è (EMA Cross + ADX Filter)
# ‚Ä¢ –§–ò–õ–¨–¢–† –¢–†–ï–ù–î–ê  : ADX > MIN_ADX (default 25)
# ‚Ä¢ RISK/REWARD    : 1 / 1.5 (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π)
# ‚Ä¢ P&L –†–ê–°–ß–Å–¢     : –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π ($/%)
# ‚Ä¢ –û–¢–ß–Å–¢–ù–û–°–¢–¨     : –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ P&L
# ============================================================================

import os
import json
import logging
import re
import uuid
import asyncio
from datetime import datetime, timezone, time

import numpy as np
import pandas as pd
import ccxt.async_support as ccxt
import pandas_ta as ta
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Bot, Update
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, ContextTypes
)

# ‚îÄ‚îÄ ENV: –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# --- –û—Å–Ω–æ–≤–Ω—ã–µ ---
BOT_TOKEN     = os.getenv("BOT_TOKEN")
CHAT_IDS_RAW  = os.getenv("CHAT_IDS", "")
SHEET_ID      = os.getenv("SHEET_ID")
PAIR_RAW      = os.getenv("PAIR", "BTC/USDT")
TIMEFRAME     = os.getenv("TIMEFRAME", "5m")
STRAT_VERSION = "v3_0_trend_rider"

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ---
MIN_VOLUME_BTC = float(os.getenv("MIN_VOLUME_BTC", "1"))
MIN_ADX        = float(os.getenv("MIN_ADX",        "25")) # –¢–µ–ø–µ—Ä—å MIN –≤–º–µ—Å—Ç–æ MAX
RR_RATIO       = float(os.getenv("RR_RATIO",       "1.5")) # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ TP –∫ SL

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã P&L –∏ –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏ ---
ENTRY_USD      = float(os.getenv("ENTRY_USD", "50"))
LEVERAGE       = float(os.getenv("LEVERAGE",  "500"))
REPORT_TIME_UTC= os.getenv("REPORT_TIME_UTC", "21:00") # –í—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –≤ UTC

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ATR –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ SL ---
ATR_LOW_USD   = float(os.getenv("ATR_LOW_USD",  "80"))
ATR_HIGH_USD  = float(os.getenv("ATR_HIGH_USD", "120"))
SL_PCT_LOW    = float(os.getenv("SL_PCT_LOW",   "0.08"))
SL_PCT_MID    = float(os.getenv("SL_PCT_MID",   "0.10"))
SL_PCT_HIGH   = float(os.getenv("SL_PCT_HIGH",  "0.12"))

# ‚îÄ‚îÄ –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s  %(levelname)-8s  %(message)s")
log = logging.getLogger(STRAT_VERSION)

if not BOT_TOKEN:
    log.critical("ENV BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"); raise SystemExit
if not re.fullmatch(r"\d+[mhdM]", TIMEFRAME):
    log.critical("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TIMEFRAME '%s'", TIMEFRAME); raise SystemExit

CHAT_IDS = {int(cid) for cid in CHAT_IDS_RAW.split(",") if cid.strip()}

# ‚îÄ‚îÄ GOOGLE SHEETS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TRADE_LOG_WS = None
def setup_google_sheets() -> None:
    global TRADE_LOG_WS
    try:
        creds = ServiceAccountCredentials.from_json_keyfile_dict(
            json.loads(os.getenv("GOOGLE_CREDENTIALS")),
            ["https://spreadsheets.google.com/feeds",
             "https://www.googleapis.com/auth/drive"]
        )
        gs = gspread.authorize(creds)
        ss = gs.open_by_key(SHEET_ID)

        # !!! –î–û–ë–ê–í–õ–ï–ù –ù–û–í–´–ô –ó–ê–ì–û–õ–û–í–û–ö "P&L_USD" !!!
        headers = [
            "Signal_ID","Version","Status","Side",
            "Entry_Time_UTC","Exit_Time_UTC",
            "Entry_Price","Exit_Price","SL_Price","TP_Price",
            "P&L_USD", # <-- –ù–û–í–û–ï –ü–û–õ–ï
            "MFE_Price","MAE_Price",
            "Entry_RSI","Entry_ADX","Entry_ATR",
            "Entry_Volume","Entry_BB_Position"
        ]

        name = f"SniperLog_{PAIR_RAW.replace('/','_')}_{TIMEFRAME}_{STRAT_VERSION}"
        try:
            ws = ss.worksheet(name)
        except gspread.WorksheetNotFound:
            ws = ss.add_worksheet(name, rows="1000", cols=len(headers))

        if ws.row_values(1) != headers:
            ws.clear(); ws.update("A1", [headers])
            ws.format(f"A1:{chr(ord('A')+len(headers)-1)}1",
                      {"textFormat": {"bold": True}})

        TRADE_LOG_WS = ws
        log.info("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Google Sheet –≤–∫–ª—é—á–µ–Ω–æ ‚ûú %s", name)
    except Exception as e:
        log.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: %s", e)

setup_google_sheets()

# ‚îÄ‚îÄ –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ï–ú ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
STATE_FILE = "btc_sniper_state.json"
state = {"monitoring": False, "active_trade": None, "daily_report_data": []}
if os.path.exists(STATE_FILE):
    try:
        with open(STATE_FILE, 'r') as f:
            state.update(json.load(f))
        if "daily_report_data" not in state: # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–∞–π–ª–æ–º
            state["daily_report_data"] = []
    except json.JSONDecodeError:
        log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.")

def save_state():
    with open(STATE_FILE, 'w') as f:
        json.dump(state, f, indent=2)

# ‚îÄ‚îÄ –ò–ù–î–ò–ö–ê–¢–û–†–´ –ò –°–¢–†–ê–¢–ï–ì–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
exchange = ccxt.mexc()
PAIR = PAIR_RAW.upper()

RSI_LEN = 14
EMA_FAST, EMA_SLOW = 9, 21
ATR_LEN, ADX_LEN = 14, 14
BBANDS_LEN = 20
RSI_LONG_ENTRY, RSI_SHORT_ENTRY = 52, 48

def add_indicators(df: pd.DataFrame) -> pd.DataFrame:
    df.ta.ema(length=EMA_FAST , append=True, col_names=(f"EMA_{EMA_FAST}",))
    df.ta.ema(length=EMA_SLOW , append=True, col_names=(f"EMA_{EMA_SLOW}",))
    df.ta.rsi(length=RSI_LEN  , append=True, col_names=(f"RSI_{RSI_LEN}",))
    df.ta.atr(length=ATR_LEN  , append=True, col_names=(f"ATR_{ATR_LEN}",))
    df.ta.adx(length=ADX_LEN, append=True,
              col_names=(f"ADX_{ADX_LEN}", f"DMP_{ADX_LEN}", f"DMN_{ADX_LEN}"))
    df.ta.bbands(length=BBANDS_LEN, std=2, append=True,
                 col_names=(f"BBL_{BBANDS_LEN}_2.0", f"BBM_{BBANDS_LEN}_2.0",
                            f"BBU_{BBANDS_LEN}_2.0", f"BBB_{BBANDS_LEN}_2.0",
                            f"BBP_{BBANDS_LEN}_2.0"))
    return df.dropna()

def get_sl_pct_by_atr(atr: float) -> float:
    if atr <= ATR_LOW_USD:  return SL_PCT_LOW
    if atr >= ATR_HIGH_USD: return SL_PCT_HIGH
    return SL_PCT_MID

# ‚îÄ‚îÄ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ò –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def notify(bot: Bot, text: str):
    for cid in CHAT_IDS:
        try:
            await bot.send_message(cid, text, parse_mode="HTML")
        except Exception as e:
            log.error("TG fail -> %s: %s", cid, e)

async def log_trade(tr: dict):
    if not TRADE_LOG_WS: return
    row = [
        tr["id"], STRAT_VERSION, tr["status"], tr["side"],
        tr["entry_time_utc"], datetime.now(timezone.utc).isoformat(),
        tr["entry_price"], tr["exit_price"],
        tr["sl_price"], tr["tp_price"],
        tr.get("pnl_usd"), # <-- –ù–û–í–û–ï –ü–û–õ–ï
        tr["mfe_price"], tr["mae_price"],
        tr["entry_rsi"], tr["entry_adx"], tr["entry_atr"],
        tr["entry_volume"], tr["entry_bb_pos"]
    ]
    await asyncio.to_thread(
        TRADE_LOG_WS.append_row, row, value_input_option="USER_ENTERED"
    )

# ‚îÄ‚îÄ –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ë–û–¢–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def monitor(app: Application):
    log.info("üöÄ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω: %s %s (%s)", PAIR, TIMEFRAME, STRAT_VERSION)
    while state["monitoring"]:
        try:
            ohlcv = await exchange.fetch_ohlcv(PAIR, timeframe=TIMEFRAME, limit=100)
            df = add_indicators(pd.DataFrame(
                ohlcv, columns=["ts","open","high","low","close","volume"]
            ))

            last, prev = df.iloc[-1], df.iloc[-2]
            price = last["close"]

            # ---------------- 1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–æ–π ----------------
            if trade := state.get("active_trade"):
                side, sl, tp = trade["side"], trade["sl_price"], trade["tp_price"]

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ MFE/MAE
                if side == "LONG":
                    trade["mfe_price"] = max(trade["mfe_price"], price)
                    trade["mae_price"] = min(trade["mae_price"], price)
                else:
                    trade["mfe_price"] = min(trade["mfe_price"], price)
                    trade["mae_price"] = max(trade["mae_price"], price)

                done = status = None
                if side == "LONG"  and price >= tp: done, status = "TP_HIT", "WIN"
                elif side == "LONG" and price <= sl: done, status = "SL_HIT", "LOSS"
                elif side == "SHORT" and price <= tp: done, status = "TP_HIT", "WIN"
                elif side == "SHORT" and price >= sl: done, status = "SL_HIT", "LOSS"

                if done:
                    # --- –†–ê–°–ß–Å–¢ P&L ---
                    entry_price = trade["entry_price"]
                    pnl_pct = 0
                    if side == "LONG":
                        pnl_pct = (price / entry_price - 1)
                    else: # SHORT
                        pnl_pct = (entry_price / price - 1)
                    
                    pnl_usd = pnl_pct * ENTRY_USD * LEVERAGE
                    trade["pnl_usd"] = round(pnl_usd, 2)
                    
                    # --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞ ---
                    state["daily_report_data"].append({
                        "pnl_usd": trade["pnl_usd"],
                        "entry_usd": ENTRY_USD
                    })

                    trade["status"] = status
                    trade["exit_price"] = price

                    pnl_text = f"üí∞ <b>P&L: {trade['pnl_usd']:.2f}$</b>"
                    msg_icon = "‚úÖ" if status == "WIN" else "‚ùå"
                    
                    await notify(app.bot,
                        f"{msg_icon} <b>–°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê: {status}</b> {msg_icon}\n\n"
                        f"<b>–¢–∏–ø:</b> {side} (v: {STRAT_VERSION})\n"
                        f"<b>ID:</b> {trade['id']}\n\n"
                        f"<b>–í—Ö–æ–¥:</b> {entry_price:.2f}\n"
                        f"<b>–í—ã—Ö–æ–¥:</b> {price:.2f}\n"
                        f"{pnl_text}"
                    )
                    await log_trade(trade)
                    state["active_trade"] = None
                    save_state()

            # ---------------- 2. –ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ -----------------------
            else:
                vol_ok = last["volume"] >= MIN_VOLUME_BTC
                adx_ok = last[f"ADX_{ADX_LEN}"] > MIN_ADX # <-- –ò–ó–ú–ï–ù–ï–ù–ê –õ–û–ì–ò–ö–ê

                if not (vol_ok and adx_ok):
                    await asyncio.sleep(60); continue

                bull_now = last[f"EMA_{EMA_FAST}"] > last[f"EMA_{EMA_SLOW}"]
                bull_prev= prev[f"EMA_{EMA_FAST}"] > prev[f"EMA_{EMA_SLOW}"]

                long_cond  = last[f"RSI_{RSI_LEN}"] > RSI_LONG_ENTRY and price > last[f"EMA_{EMA_FAST}"]
                short_cond = last[f"RSI_{RSI_LEN}"] < RSI_SHORT_ENTRY and price < last[f"EMA_{EMA_FAST}"]

                side = None
                if   bull_now and not bull_prev and long_cond:  side = "LONG"
                elif not bull_now and bull_prev and short_cond: side = "SHORT"

                if side:
                    atr = last[f"ATR_{ATR_LEN}"]
                    sl_pct = get_sl_pct_by_atr(atr)
                    tp_pct = sl_pct * RR_RATIO # <-- –ù–û–í–´–ô –†–ê–°–ß–ï–¢ TP

                    entry = price
                    sl = entry * (1 - sl_pct/100) if side=="LONG" else entry * (1 + sl_pct/100)
                    tp = entry * (1 + tp_pct/100) if side=="LONG" else entry * (1 - tp_pct/100)

                    bb_up, bb_lo = last[f"BBU_{BBANDS_LEN}_2.0"], last[f"BBL_{BBANDS_LEN}_2.0"]
                    bb_pos = "–í–Ω—É—Ç—Ä–∏"
                    if entry > bb_up:   bb_pos = "–í—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π"
                    elif entry < bb_lo: bb_pos = "–ù–∏–∂–µ –Ω–∏–∂–Ω–µ–π"

                    trade = dict(
                        id=uuid.uuid4().hex[:8], side=side,
                        entry_time_utc=datetime.now(timezone.utc).isoformat(),
                        entry_price=entry, tp_price=tp, sl_price=sl,
                        mfe_price=entry, mae_price=entry,
                        entry_rsi=round(last[f"RSI_{RSI_LEN}"],2),
                        entry_adx=round(last[f"ADX_{ADX_LEN}"],2),
                        entry_atr=round(atr,2),
                        entry_volume=last["volume"], entry_bb_pos=bb_pos
                    )
                    state["active_trade"] = trade
                    save_state()

                    await notify(
                        app.bot,
                        f"üîî <b>–ù–û–í–´–ô –°–ò–ì–ù–ê–õ: {side}</b> üîî\n\n"
                        f"<b>–í–µ—Ä—Å–∏—è:</b> {STRAT_VERSION}\n"
                        f"<b>ID:</b> {trade['id']}\n\n"
                        f"<b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> {entry:.2f}\n"
                        f"<b>Take Profit:</b> {tp:.2f} ({tp_pct:.2f}%)\n"
                        f"<b>Stop Loss:</b> {sl:.2f} ({sl_pct:.2f}%)\n\n"
                        f"<i>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ADX={trade['entry_adx']}, RSI={trade['entry_rsi']}, ATR={trade['entry_atr']}</i>"
                    )

        except ccxt.NetworkError as e:
            log.warning("CCXT –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏: %s", e); await asyncio.sleep(60)
        except Exception as e:
            log.exception("–°–±–æ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ:"); await asyncio.sleep(30)

        await asyncio.sleep(60)
    log.info("‚õîÔ∏è –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# ‚îÄ‚îÄ –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–Å–¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def daily_reporter(app: Application):
    log.info("üìà –°–µ—Ä–≤–∏—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω.")
    while True:
        now_utc = datetime.now(timezone.utc)
        report_h, report_m = map(int, REPORT_TIME_UTC.split(':'))
        report_time = now_utc.replace(hour=report_h, minute=report_m, second=0, microsecond=0)
        
        if now_utc > report_time:
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –∂–¥—ë–º –¥–æ –∑–∞–≤—Ç—Ä–∞
            report_time = report_time.replace(day=now_utc.day + 1)

        wait_seconds = (report_time - now_utc).total_seconds()
        log.info(f"–°–ª–µ–¥—É—é—â–∏–π —Å—É—Ç–æ—á–Ω—ã–π –æ—Ç—á—ë—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {REPORT_TIME_UTC} UTC (—á–µ—Ä–µ–∑ {wait_seconds/3600:.2f} —á).")
        await asyncio.sleep(wait_seconds)

        # –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        report_data = state.get("daily_report_data", [])
        if not report_data:
            await notify(app.bot, "üìä <b>–°—É—Ç–æ—á–Ω—ã–π –æ—Ç—á—ë—Ç</b> üìä\n\n–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ —Å–¥–µ–ª–æ–∫ –Ω–µ –±—ã–ª–æ.")
            continue

        total_pnl_usd = sum(item['pnl_usd'] for item in report_data)
        total_trades = len(report_data)
        wins = sum(1 for item in report_data if item['pnl_usd'] > 0)
        losses = total_trades - wins
        win_rate = (wins / total_trades) * 100 if total_trades > 0 else 0
        
        # PnL –≤ % –æ—Ç –æ–±—â–µ–≥–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ (–Ω–µ–ø–ª–µ—á–µ–≤–æ–≥–æ)
        total_investment = sum(item['entry_usd'] for item in report_data)
        pnl_percent = (total_pnl_usd / total_investment) * 100 if total_investment > 0 else 0
        
        report_msg = (
            f"üìä <b>–°—É—Ç–æ—á–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {STRAT_VERSION}</b> üìä\n\n"
            f"<b>–ü–µ—Ä–∏–æ–¥:</b> –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞\n"
            f"<b>–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:</b> {total_trades} (üìà{wins} / üìâ{losses})\n"
            f"<b>–í–∏–Ω—Ä–µ–π—Ç:</b> {win_rate:.2f}%\n\n"
            f"<b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
            f"üíµ <b>P&L ($): {total_pnl_usd:+.2f}$</b>\n"
            f"üíπ <b>P&L (%): {pnl_percent:+.2f}%</b>"
        )
        await notify(app.bot, report_msg)

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
        state["daily_report_data"] = []
        save_state()

# ‚îÄ‚îÄ –ö–û–ú–ê–ù–î–´ TELEGRAM –ò –ó–ê–ü–£–°–ö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def _start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    CHAT_IDS.add(update.effective_chat.id)
    if not state["monitoring"]:
        state["monitoring"] = True; save_state()
        await update.message.reply_text(f"‚úÖ –ë–æ—Ç <b>{STRAT_VERSION}</b> –∑–∞–ø—É—â–µ–Ω. –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.", parse_mode="HTML")
        asyncio.create_task(monitor(ctx.application))
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")

async def _stop(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    state["monitoring"] = False; save_state()
    await update.message.reply_text("‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

async def _status(update: Update, _):
    msg = f"<b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–ö–¢–ò–í–ï–ù' if state['monitoring'] else '–û–°–¢–ê–ù–û–í–õ–ï–ù'}\n"
    if tr := state["active_trade"]:
        msg += (f"<b>–ê–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞: {tr['side']}</b> (ID: {tr['id']})\n"
                f"–í—Ö–æ–¥: {tr['entry_price']:.2f} | TP: {tr['tp_price']:.2f} | SL: {tr['sl_price']:.2f}")
    else:
        msg += "<i>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.</i>"
    await update.message.reply_text(msg, parse_mode="HTML")

async def _post_init(app: Application):
    if os.path.exists(STATE_FILE):
        log.info("–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞—é.")
    if state["monitoring"]:
        asyncio.create_task(monitor(app))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
    asyncio.create_task(daily_reporter(app))

if __name__ == "__main__":
    app = (ApplicationBuilder()
           .token(BOT_TOKEN)
           .post_init(_post_init)
           .build())
    app.add_handler(CommandHandler("start",  _start))
    app.add_handler(CommandHandler("stop",   _stop))
    app.add_handler(CommandHandler("status", _status))
    app.run_polling()
