#!/usr/bin/env python3
# ============================================================================
# v5.1 - EMA Crossover Signal Monitor (—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏)
# ============================================================================

import os
import asyncio
import json
import logging
from datetime import datetime, timezone
import numpy as np
import pandas as pd
import ccxt.async_support as ccxt
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, Bot
from telegram.ext import Application, ApplicationBuilder, CommandHandler, ContextTypes

# === ENV / Logging ===
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
# –ü—Ä–∏–º–µ—Ä –¥–ª—è CHAT_IDS: "12345678,87654321"
CHAT_IDS_RAW = os.getenv("CHAT_IDS", "")
SHEET_ID = os.getenv("SHEET_ID")
PAIR_RAW = os.getenv("PAIR", "BTC/USDT")
TIMEFRAME = os.getenv("TIMEFRAME", "1h")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
log = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if not BOT_TOKEN:
    log.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
    exit()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ CHAT_IDS. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
CHAT_IDS = {int(cid.strip()) for cid in CHAT_IDS_RAW.split(",") if cid.strip()}
if not CHAT_IDS:
    log.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è CHAT_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞. –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –Ω–∞–ø–∏—à–µ—Ç /start.")

# === GOOGLE SHEETS ===
LOGS_WS = None
try:
    creds_json_string = os.getenv("GOOGLE_CREDENTIALS")
    if creds_json_string:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds_dict = json.loads(creds_json_string)
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        gs = gspread.authorize(creds)
        LOGS_WS = gs.open_by_key(SHEET_ID).worksheet("LP_Logs")
        HEADERS = ["–î–∞—Ç–∞-–≤—Ä–µ–º—è", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–î–µ–ø–æ–∑–∏—Ç", "–í—Ö–æ–¥", "Stop Loss", "Take Profit", "RR", "P&L —Å–¥–µ–ª–∫–∏ (USDT)", "–ü—Ä–∏–±—ã–ª—å –∫ –¥–µ–ø–æ–∑–∏—Ç—É (%)"]
        if LOGS_WS.row_values(1) != HEADERS:
            LOGS_WS.resize(rows=1)
            LOGS_WS.update('A1', [HEADERS])
        log.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets.")
    else:
        log.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –†–∞–±–æ—Ç–∞ —Å Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
except Exception as e:
    log.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
    LOGS_WS = None

# === STATE MANAGEMENT ===
STATE_FILE = "advanced_signal_state.json"
state = {
    "monitoring": False,
    "active_signal": None,
    "manual_position": None,
    "signal_status": {
        "rsi": False,
        "ema_position": False,
        "ema_cross": False,
        "side": None
    }
}

def save_state():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ JSON —Ñ–∞–π–ª."""
    try:
        with open(STATE_FILE, 'w') as f:
            json.dump(state, f, indent=2)
    except Exception as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}")

def load_state():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ JSON —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    global state
    if os.path.exists(STATE_FILE):
        try:
            with open(STATE_FILE, 'r') as f:
                state = json.load(f)
            log.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {state}")
        except Exception as e:
            log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}")

# === EXCHANGE ===
exchange = ccxt.mexc()
PAIR = PAIR_RAW.upper()

# === STRATEGY PARAMS ===
RSI_LEN = 14
EMA_FAST_LEN, EMA_SLOW_LEN = 9, 21
RSI_LONG_T, RSI_SHORT_T = 52, 48
PRICE_CHANGE_STEP_PCT = 0.1

# === INDICATORS ===
def _ta_rsi(series: pd.Series, length=14):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ä–∞—Å—á–µ—Ç RSI –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å pandas-ta."""
    delta = series.diff()
    gain = delta.clip(lower=0).rolling(window=length, min_periods=length).mean()
    loss = (-delta.clip(upper=0)).rolling(window=length, min_periods=length).mean()
    if loss.empty or loss.iloc[-1] == 0: return pd.Series(100, index=series.index)
    rs = gain / loss
    return 100 - (100 / (1 + rs))

def calculate_indicators(df: pd.DataFrame):
    """–†–∞—Å—á–µ—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""
    df['ema_fast'] = df['close'].ewm(span=EMA_FAST_LEN, adjust=False).mean()
    df['ema_slow'] = df['close'].ewm(span=EMA_SLOW_LEN, adjust=False).mean()
    df['rsi'] = _ta_rsi(df['close'], RSI_LEN)
    df['ema_cross'] = df['ema_fast'] > df['ema_slow']
    return df.dropna()

# === CORE FUNCTIONS ===
async def broadcast_message(bot: Bot, text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ —Å–ø–∏—Å–∫–∞ CHAT_IDS."""
    if not CHAT_IDS:
        log.warning("–°–ø–∏—Å–æ–∫ CHAT_IDS –ø—É—Å—Ç. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    log.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {len(CHAT_IDS)} —á–∞—Ç–æ–≤: \"{text}\"")
    for chat_id in CHAT_IDS:
        try:
            await bot.send_message(chat_id=chat_id, text=text)
        except Exception as e:
            log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")

async def monitor_loop(app: Application):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤."""
    log.info("–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω.")
    while state.get('monitoring', False):
        try:
            ohlcv = await exchange.fetch_ohlcv(PAIR, timeframe=TIMEFRAME, limit=100)
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df = calculate_indicators(df.copy())
            
            if df.empty or len(df) < 2:
                log.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.")
                await asyncio.sleep(30)
                continue

            last = df.iloc[-1]
            prev = df.iloc[-2]
            current_price = last['close']

            rsi_passed = last['rsi'] > RSI_LONG_T
            ema_position_passed = last['close'] > last['ema_fast'] and last['close'] > last['ema_slow']
            ema_cross_passed = not prev['ema_cross'] and last['ema_cross'] # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è

            # --- –õ–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ LONG ---
            if rsi_passed and ema_position_passed and ema_cross_passed:
                if not state.get('active_signal'):
                    state['active_signal'] = {
                        "side": "LONG",
                        "price": current_price,
                        "next_target_pct": PRICE_CHANGE_STEP_PCT
                    }
                    state['signal_status'] = {"rsi": True, "ema_position": True, "ema_cross": True, "side": "LONG"}
                    save_state()
                    await broadcast_message(app.bot, f"‚úÖ –°–ò–ì–ù–ê–õ LONG –ø–æ {PAIR}! –¶–µ–Ω–∞: {current_price:.2f}")

            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ ---
            elif state.get('active_signal'):
                signal_data = state['active_signal']
                
                # –£—Å–ª–æ–≤–∏—è –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è LONG –ø–æ–∑–∏—Ü–∏–∏
                still_rsi = last['rsi'] > RSI_SHORT_T # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
                still_ema_pos = last['close'] > last['ema_slow'] # –û—Å–ª–∞–±–ª–µ–Ω–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ
                still_cross = last['ema_fast'] > last['ema_slow']

                missing = []
                if not still_rsi: missing.append("RSI –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞")
                if not still_ema_pos: missing.append("–¶–µ–Ω–∞ –Ω–∏–∂–µ –º–µ–¥–ª–µ–Ω–Ω–æ–π EMA")
                if not still_cross: missing.append("–û–±—Ä–∞—Ç–Ω–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ EMA")

                if missing:
                    await broadcast_message(app.bot, f"‚ö†Ô∏è –û–¢–ú–ï–ù–ê —Å–∏–≥–Ω–∞–ª–∞ LONG –ø–æ {PAIR}. –ù–∞—Ä—É—à–µ–Ω—ã —É—Å–ª–æ–≤–∏—è: {', '.join(missing)}")
                    state['active_signal'] = None
                    state['signal_status'] = {"rsi": False, "ema_position": False, "ema_cross": False, "side": None}
                    save_state()
                else:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏
                    price_change_pct = ((current_price - signal_data['price']) / signal_data['price']) * 100
                    if price_change_pct >= signal_data['next_target_pct']:
                        await broadcast_message(app.bot, f"üéØ –¶–ï–õ–¨ +{signal_data['next_target_pct']:.1f}% –ø–æ {PAIR} –î–û–°–¢–ò–ì–ù–£–¢–ê. –¶–µ–Ω–∞: {current_price:.2f}")
                        state['active_signal']['next_target_pct'] += PRICE_CHANGE_STEP_PCT
                        save_state()
            
            # --- –°–æ–æ–±—â–µ–Ω–∏–µ –æ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö (–µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞) ---
            else:
                partials = []
                if rsi_passed: partials.append("RSI")
                if ema_position_passed: partials.append("EMA –ø–æ–ª–æ–∂–µ–Ω–∏–µ")
                if ema_cross_passed: partials.append("EMA –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ, –Ω–æ –Ω–µ –≤—Å–µ —É—Å–ª–æ–≤–∏—è
                if 0 < len(partials) < 3:
                    # –ß—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                    pass # –ø–æ–∫–∞ –æ—Ç–∫–ª—é—á–∏–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å–ø–∞–º–∞
            
            await asyncio.sleep(30)

        except ccxt.NetworkError as e:
            log.warning(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ CCXT: {e}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥.")
            await asyncio.sleep(60)
        except Exception as e:
            log.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}", exc_info=True)
            await asyncio.sleep(30)
    log.info("–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


# === COMMANDS ===
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."""
    chat_id = update.effective_chat.id
    if chat_id not in CHAT_IDS:
        CHAT_IDS.add(chat_id)
        log.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π CHAT_ID –¥–æ–±–∞–≤–ª–µ–Ω: {chat_id}. –î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

    if not state.get('monitoring'):
        state['monitoring'] = True
        save_state()
        await update.message.reply_text(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ –ø–∞—Ä–µ {PAIR} ({TIMEFRAME}) –∑–∞–ø—É—â–µ–Ω.")
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–∫ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        asyncio.create_task(monitor_loop(ctx.application))
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.")

async def cmd_stop(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."""
    if state.get('monitoring'):
        state['monitoring'] = False
        save_state()
        await update.message.reply_text("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.")

async def cmd_status(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å."""
    if not state['monitoring']:
        await update.message.reply_text("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
        return

    if signal := state.get('active_signal'):
        side = signal['side']
        price = signal['price']
        next_target = signal['next_target_pct']
        await update.message.reply_text(f"–ê–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {side} –æ—Ç —Ü–µ–Ω—ã {price:.2f}. –°–ª–µ–¥—É—é—â–∞—è —Ü–µ–ª—å: +{next_target:.1f}%")
    else:
        status = state['signal_status']
        conditions = [
            f"RSI > {RSI_LONG_T}: {'–î–∞' if status['rsi'] else '–ù–µ—Ç'}",
            f"–¶–µ–Ω–∞ > EMA: {'–î–∞' if status['ema_position'] else '–ù–µ—Ç'}",
            f"–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ EMA: {'–î–∞' if status['ema_cross'] else '–ù–µ—Ç'}"
        ]
        await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–µ—Ç. –û–∂–∏–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π:\n" + "\n".join(conditions))

# === APPLICATION LIFECYCLE ===
async def post_init(app: Application):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    load_state()
    if state.get('monitoring'):
        log.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        asyncio.create_task(monitor_loop(app))

async def on_shutdown(app: Application):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    log.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    save_state()
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é —Å –±–∏—Ä–∂–µ–π
    await exchange.close()
    log.info("–°–µ—Å—Å–∏—è —Å –±–∏—Ä–∂–µ–π –∑–∞–∫—Ä—ã—Ç–∞.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    log.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    app = ApplicationBuilder()\
        .token(BOT_TOKEN)\
        .post_init(post_init)\
        .post_shutdown(on_shutdown)\
        .build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("stop", cmd_stop))
    app.add_handler(CommandHandler("status", cmd_status))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app.run_polling()

if __name__ == "__main__":
    main()
