# main.py
from __future__ import annotations

import asyncio
import logging
import os
import re
from typing import Optional

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
)

# === –Ω–∞—à —Å–∫–∞–Ω–µ—Ä ===
from scanner_bmr_dca import (
    start_scanner_for_pair,
    stop_scanner_for_pair,
    stop_all_scanners,
    is_scanner_running,
    CONFIG,
)

logging.basicConfig(
    level=os.getenv("LOGLEVEL", "INFO"),
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("main")

# -----------------------------------------------------------------------------
# HTML sanitizer + —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
# -----------------------------------------------------------------------------
ALLOWED_TAGS = {
    "b", "strong", "i", "em", "u", "ins", "s", "strike", "del",
    "code", "pre", "a", "tg-spoiler"
}
A_OPEN_RE = re.compile(r"&lt;a\s+href=(['\"]).*?\1\s*&gt;", re.IGNORECASE)

def html_safe(text: str) -> str:
    """
    –¢–µ–ª–µ–≥—Ä–∞–º —Å—Ç—Ä–æ–≥–æ –ø–∞—Ä—Å–∏—Ç HTML. –õ—é–±—ã–µ –Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —É–≥–ª–æ–≤—ã–µ —Å–∫–æ–±–∫–∏ –Ω–∞–¥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å,
    –∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ–≥–∏ –≤–µ—Ä–Ω—É—Ç—å –æ–±—Ä–∞—Ç–Ω–æ. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º <a href="...">...</a>.
    """
    if text is None:
        return ""
    # 1) —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å—ë
    t = text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
    # 2) –≤–µ—Ä–Ω—ë–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ç–µ–≥–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ/–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ
    for tag in ALLOWED_TAGS:
        t = t.replace(f"&lt;{tag}&gt;", f"<{tag}>")
        t = t.replace(f"&lt;/{tag}&gt;", f"</{tag}>")
    # 3) –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–æ—á–∏–Ω–∏–º <a href="...">...</a>
    #    (–¥–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º –∞—Ç—Ä–∏–±—É—Ç href; –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏)
    def _restore_a(m: re.Match) -> str:
        s = m.group(0)
        s = s.replace("&lt;", "<").replace("&gt;", ">").replace("&amp;", "&")
        return s
    t = A_OPEN_RE.sub(_restore_a, t)
    t = t.replace("&lt;/a&gt;", "</a>")
    return t

async def broadcast_html(app: Application, text: str, target_chat_id: Optional[int] = None):
    if target_chat_id is None:
        log.warning("broadcast_html: target_chat_id is None; drop message")
        return
    try:
        await app.bot.send_message(
            chat_id=target_chat_id,
            text=html_safe(text),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )
    except Exception as e:
        log.error(f"broadcast_html send failed: {e}", exc_info=True)


# -----------------------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏/–∫–ª—é—á–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
# -----------------------------------------------------------------------------
def _ns_key(symbol: str, chat_id: Optional[int]) -> str:
    return f"{(symbol or '').upper()}|{chat_id or 'default'}"

def _get_current_symbol(app: Application, chat_id: int) -> Optional[str]:
    return app.bot_data.get(f"current_symbol|{chat_id}")

def _set_current_symbol(app: Application, chat_id: int, symbol: str):
    app.bot_data[f"current_symbol|{chat_id}"] = (symbol or "").upper()

def _slot(app: Application, symbol: str, chat_id: int) -> dict:
    return app.bot_data.setdefault(_ns_key(symbol, chat_id), {})


# -----------------------------------------------------------------------------
# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
# -----------------------------------------------------------------------------
START_TEXT = (
    "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.\n"
    "–ö–æ–º–∞–Ω–¥—ã (–≤ —ç—Ç–æ–º —á–∞—Ç–µ):\n"
    "‚Ä¢ /run <SYMBOL> ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–µ—Ä –¥–ª—è –ø–∞—Ä—ã (–ø—Ä–∏–º–µ—Ä: /run GBPUSD)\n"
    "‚Ä¢ /stop [hard] ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–∞–Ω–µ—Ä –ø–æ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä–µ (hard ‚Äî —Å –æ—á–∏—Å—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è)\n"
    "‚Ä¢ /stopall ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–∫–∞–Ω–µ—Ä—ã\n"
    "‚Ä¢ /status ‚Äî –∫—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä–µ\n"
    "‚Ä¢ /setbank <USD> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–Ω–∫ –ø–∞—Ä—ã (–ø—Ä–∏–º–µ—Ä: /setbank 6000)\n"
    "‚Ä¢ /open <long|short> [steps] ‚Äî –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—á–Ω–æ–π –≤—Ö–æ–¥ c —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º\n"
    "‚Ä¢ /close ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é\n"
    "‚Ä¢ /mychat ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞\n"
)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(html_safe(START_TEXT), parse_mode=ParseMode.HTML)

async def cmd_mychat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    await update.message.reply_text(
        html_safe(f"–≠—Ç–æ—Ç —á–∞—Ç: <code>{cid}</code>"),
        parse_mode=ParseMode.HTML,
    )

async def cmd_run(update: Update, context: ContextTypes.DEFAULT_TYPE):
    app = context.application
    cid = update.effective_chat.id
    if not context.args:
        await update.message.reply_text(
            html_safe("–£–∫–∞–∂–∏ —Å–∏–º–≤–æ–ª: /run <SYMBOL> (–Ω–∞–ø—Ä. /run GBPUSD)"),
            parse_mode=ParseMode.HTML,
        )
        return
    symbol = context.args[0].upper()
    _set_current_symbol(app, cid, symbol)
    msg = await start_scanner_for_pair(
        app,
        broadcast=broadcast_html,
        symbol=symbol,
        chat_id=cid,
        botbox=app.bot_data,
    )
    await broadcast_html(app, f"‚úÖ {html_safe(msg)}", target_chat_id=cid)

async def cmd_stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    app = context.application
    cid = update.effective_chat.id
    symbol = _get_current_symbol(app, cid)
    if not symbol:
        await update.message.reply_text(
            html_safe("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏: /run <SYMBOL>"),
            parse_mode=ParseMode.HTML,
        )
        return
    hard = False
    if context.args and context.args[0].lower() == "hard":
        hard = True
    msg = await stop_scanner_for_pair(app, symbol=symbol, chat_id=cid, hard=hard)
    await broadcast_html(app, msg, target_chat_id=cid)

async def cmd_stopall(update: Update, context: ContextTypes.DEFAULT_TYPE):
    app = context.application
    msgs = await stop_all_scanners(app, hard=("hard" in [a.lower() for a in context.args] if context.args else False))
    text = ";\n".join(msgs) if msgs else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞–Ω–µ—Ä–æ–≤."
    await broadcast_html(app, text, target_chat_id=update.effective_chat.id)

async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    app = context.application
    cid = update.effective_chat.id
    symbol = _get_current_symbol(app, cid)
    if not symbol:
        await update.message.reply_text(
            html_safe("–°–∫–∞–Ω–µ—Ä –µ—â—ë –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π: /run <SYMBOL>"),
            parse_mode=ParseMode.HTML,
        )
        return
    slot = _slot(app, symbol, cid)
    line = slot.get("status_line")
    if not line:
        if is_scanner_running(app, symbol, cid):
            line = f"‚è≥ –°–∫–∞–Ω–µ—Ä –¥–ª—è <b>{symbol}</b> —Ä–∞–±–æ—Ç–∞–µ—Ç. –î–∞–Ω–Ω—ã–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è‚Ä¶"
        else:
            line = f"‚ÑπÔ∏è –°–∫–∞–Ω–µ—Ä –¥–ª—è <b>{symbol}</b> –Ω–µ –∑–∞–ø—É—â–µ–Ω."
    await broadcast_html(app, line, target_chat_id=cid)

async def cmd_setbank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–Ω–∫ (USD) –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ.
    –ü—Ä–∏–º–µ—Ä: /setbank 6000
    """
    app = context.application
    cid = update.effective_chat.id
    symbol = _get_current_symbol(app, cid)
    if not context.args:
        await update.message.reply_text(
            html_safe("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setbank <USD>, –ø—Ä–∏–º–µ—Ä: /setbank 6000"),
            parse_mode=ParseMode.HTML,
        )
        return
    if not symbol:
        await update.message.reply_text(
            html_safe("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–∞—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /run <SYMBOL>"),
            parse_mode=ParseMode.HTML,
        )
        return
    try:
        amount = float(context.args[0].replace(",", "."))
        if amount <= 0:
            raise ValueError
    except Exception:
        await update.message.reply_text(
            html_safe("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü—Ä–∏–º–µ—Ä: /setbank 6000"),
            parse_mode=ParseMode.HTML,
        )
        return

    slot = _slot(app, symbol, cid)
    slot["safety_bank_usdt"] = float(amount)
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–∞—Ä–≥–µ—Ç –º–æ–∂–µ–º –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å ‚Äî –µ–≥–æ –¥–∞—ë—Ç FUND_BOT; –Ω–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç,
    # –ø—É—Å—Ç—å —Ç–∞—Ä–≥–µ—Ç –±—É–¥–µ—Ç —Ä–∞–≤–µ–Ω —Ñ–∞–∫—Ç—É, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—É—Å –≤—ã–≥–ª—è–¥–µ–ª –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ.
    if "bank_target_usdt" not in slot:
        slot["bank_target_usdt"] = float(amount)

    await broadcast_html(
        app,
        f"‚úÖ –ë–∞–Ω–∫ –¥–ª—è –ø–∞—Ä—ã <b>{symbol}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <code>{amount:.2f}</code> USD.",
        target_chat_id=cid,
    )

async def cmd_open(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –†—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥: /open long [steps] –∏–ª–∏ /open short [steps]
    –®–∞–≥–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ. –ü–ª–µ—á–æ –±–µ—Ä—ë—Ç—Å—è –∏–∑ CONFIG.
    """
    app = context.application
    cid = update.effective_chat.id
    symbol = _get_current_symbol(app, cid)
    if not symbol:
        await update.message.reply_text(
            html_safe("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ —Å–∫–∞–Ω–µ—Ä: /run <SYMBOL>"),
            parse_mode=ParseMode.HTML,
        )
        return
    if not context.args:
        await update.message.reply_text(
            html_safe("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /open <long|short> [steps]"),
            parse_mode=ParseMode.HTML,
        )
        return
    side = context.args[0].lower()
    if side not in ("long", "short"):
        await update.message.reply_text(
            html_safe("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å long –∏–ª–∏ short."),
            parse_mode=ParseMode.HTML,
        )
        return
    steps = None
    if len(context.args) >= 2:
        try:
            steps = int(float(context.args[1]))
        except Exception:
            steps = None

    slot = _slot(app, symbol, cid)
    slot["manual_open"] = {"side": side.upper(), "max_steps": steps}
    await broadcast_html(
        app,
        f"‚è≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—á–Ω–æ–π –≤—Ö–æ–¥ –ø–æ <b>{symbol}</b>: <code>{side.upper()}</code>"
        + (f" (steps={steps})" if steps else ""),
        target_chat_id=cid,
    )

async def cmd_close(update: Update, context: ContextTypes.DEFAULT_TYPE):
    app = context.application
    cid = update.effective_chat.id
    symbol = _get_current_symbol(app, cid)
    if not symbol:
        await update.message.reply_text(
            html_safe("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ —Å–∫–∞–Ω–µ—Ä: /run <SYMBOL>"),
            parse_mode=ParseMode.HTML,
        )
        return
    slot = _slot(app, symbol, cid)
    slot["force_close"] = True
    await broadcast_html(app, f"üß∞ –†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ <b>{symbol}</b>.", target_chat_id=cid)

async def cmd_diag(update: Update, context: ContextTypes.DEFAULT_TYPE):
    app = context.application
    cid = update.effective_chat.id
    symbol = _get_current_symbol(app, cid)
    if not symbol:
        await update.message.reply_text(
            html_safe("–°–Ω–∞—á–∞–ª–∞ /run <SYMBOL>"),
            parse_mode=ParseMode.HTML,
        )
        return
    slot = _slot(app, symbol, cid)
    slot["cmd_diag_targets"] = True
    await broadcast_html(app, "üß™ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∞—Ä–≥–µ—Ç–æ–≤ –∑–∞–ø—Ä–æ—à–µ–Ω–∞.", target_chat_id=cid)


# -----------------------------------------------------------------------------
# boot
# -----------------------------------------------------------------------------
def build_app() -> Application:
    token = os.environ.get("TELEGRAM_TOKEN")
    if not token:
        raise RuntimeError("TELEGRAM_TOKEN is not set")
    app = Application.builder().token(token).build()

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("run", cmd_run))
    app.add_handler(CommandHandler("stop", cmd_stop))
    app.add_handler(CommandHandler("stopall", cmd_stopall))
    app.add_handler(CommandHandler("status", cmd_status))
    app.add_handler(CommandHandler("setbank", cmd_setbank))
    app.add_handler(CommandHandler("open", cmd_open))
    app.add_handler(CommandHandler("close", cmd_close))
    app.add_handler(CommandHandler("mychat", cmd_mychat))
    app.add_handler(CommandHandler("diag", cmd_diag))

    return app

if __name__ == "__main__":
    application = build_app()
    log.info("Bot starting‚Ä¶")
    # polling (Railway/Heroku ok). –ï—Å–ª–∏ –Ω—É–∂–µ–Ω webhook ‚Äî –¥–æ–±–∞–≤—å –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ.
    application.run_polling(close_loop=False)
