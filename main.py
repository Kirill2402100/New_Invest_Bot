from __future__ import annotations
import os
import asyncio
import logging
from typing import Optional

from telegram import (
    Update, constants, BotCommand,
    BotCommandScopeAllGroupChats, BotCommandScopeAllPrivateChats,
    BotCommandScopeChat, MenuButtonCommands
)
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler,
    ContextTypes, PicklePersistence
)

# --- Logging FIRST ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logging.getLogger("httpx").setLevel(logging.WARNING)
log = logging.getLogger("bot")

# --- Engine imports ---
from scanner_bmr_dca import CONFIG, _norm_symbol
from scanner_bmr_dca import (
    start_scanner_for_pair,
    stop_scanner_for_pair,
    is_scanner_running,
)

BOT_VERSION = "BMR-DCA FX v3.0 (Per-Chat Per-Pair)"

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN env var is not set")

# === Helpers ===

def ns_key(pair: str, chat_id: int | None) -> str:
    return f"{_norm_symbol(pair)}|{chat_id or 'default'}"

def slot_for(app: Application, pair: str, chat_id: int) -> dict:
    """–ë–æ–∫—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–≤–∏–∂–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–∞—Ç–µ."""
    key = ns_key(pair, chat_id)
    return app.bot_data.setdefault(key, {"chat_id": chat_id})

async def broadcast(app: Application, txt: str, target_chat_id: int | None = None):
    """–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: –µ—Å–ª–∏ –∑–∞–¥–∞–Ω chat_id ‚Äî –ø–∏—à–µ–º —Ç–æ–ª—å–∫–æ —Ç—É–¥–∞."""
    if not target_chat_id:
        log.warning("broadcast called without target_chat_id; dropping message")
        return
    try:
        await app.bot.send_message(chat_id=target_chat_id, text=txt, parse_mode=constants.ParseMode.HTML)
    except Exception as e:
        log.error(f"Send message failed for chat {target_chat_id}: {e}")

# === Lifecycle / init ===

async def post_init(app: Application):
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
    except Exception as e:
        log.warning(f"delete_webhook failed: {e}")

    # –ö–æ–º–∞–Ω–¥—ã (–≤–µ–∑–¥–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)
    CMDS = [
        BotCommand("start",   "–°–ø—Ä–∞–≤–∫–∞ –∏ –∫–æ–º–∞–Ω–¥—ã"),
        BotCommand("run",     "–ó–∞–ø—É—Å–∫: /run EURUSD"),
        BotCommand("stop",    "–°—Ç–æ–ø: /stop EURUSD [hard]"),
        BotCommand("status",  "–°—Ç–∞—Ç—É—Å: /status EURUSD"),
        BotCommand("open",    "–û—Ç–∫—Ä—ã—Ç—å: /open EURUSD long|short [lev] [steps]"),
        BotCommand("close",   "–ó–∞–∫—Ä—ã—Ç—å: /close EURUSD"),
        BotCommand("setbank", "–ë–∞–Ω–∫: /setbank EURUSD 1000"),
        BotCommand("mychatid","–ü–æ–∫–∞–∑–∞—Ç—å chat_id"),
    ]
    for scope in (BotCommandScopeAllPrivateChats(), BotCommandScopeAllGroupChats()):
        try:
            await app.bot.set_my_commands(CMDS, scope=scope)
        except Exception as e:
            log.warning(f"set_my_commands({scope}) failed: {e}")
    try:
        await app.bot.set_my_commands(CMDS)
    except Exception as e:
        log.warning(f"set_my_commands(default) failed: {e}")

    # –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é
    try:
        await app.bot.set_chat_menu_button(menu_button=MenuButtonCommands())
    except Exception as e:
        log.warning(f"set_chat_menu_button(default) failed: {e}")

async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    log.exception("Unhandled error in handler", exc_info=context.error)

# === Commands ===

async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚úÖ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.</b>\n"
        "–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç <u>–¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞—Ä—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ</u>.\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã</b>:\n"
        "‚Ä¢ /run EURUSD ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–µ—Ä –ø–æ EURUSD\n"
        "‚Ä¢ /stop EURUSD ‚Äî –º—è–≥–∫–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (–¥–æ–±–∞–≤—å <code>hard</code> –¥–ª—è —Å–±—Ä–æ—Å–∞)\n"
        "‚Ä¢ /status EURUSD ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å\n"
        "‚Ä¢ /open EURUSD long 200 5 ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –ª–æ–Ω–≥, –ø–ª–µ—á–æ 200, –º–∞–∫—Å. 5 —à–∞–≥–æ–≤\n"
        "‚Ä¢ /close EURUSD ‚Äî –∑–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é\n"
        "‚Ä¢ /setbank EURUSD 1200 ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–Ω–∫ –ø–∞—Ä—ã\n"
        "‚Ä¢ /mychatid ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞",
        parse_mode=constants.ParseMode.HTML
    )

async def cmd_mychatid(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–í–∞—à chat_id: <code>{update.effective_chat.id}</code>",
        parse_mode=constants.ParseMode.HTML
    )

async def cmd_run(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not ctx.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /run <PAIR>\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/run EURUSD</code>", parse_mode=constants.ParseMode.HTML)
        return
    pair = _norm_symbol(ctx.args[0])
    chat_id = update.effective_chat.id

    msg = await start_scanner_for_pair(
        ctx.application,
        broadcast,
        symbol=pair,
        chat_id=chat_id,
        botbox=ctx.application.bot_data,
    )
    await update.message.reply_text(msg, parse_mode=constants.ParseMode.HTML)

async def cmd_stop(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not ctx.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /stop <PAIR> [hard]\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/stop EURUSD hard</code>", parse_mode=constants.ParseMode.HTML)
        return
    pair = _norm_symbol(ctx.args[0])
    hard = any(a.lower() == "hard" for a in ctx.args[1:])
    chat_id = update.effective_chat.id

    msg = await stop_scanner_for_pair(
        ctx.application,
        symbol=pair,
        chat_id=chat_id,
        hard=hard
    )
    await update.message.reply_text(msg, parse_mode=constants.ParseMode.HTML)

async def cmd_status(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not ctx.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /status <PAIR>\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/status EURUSD</code>", parse_mode=constants.ParseMode.HTML)
        return
    pair = _norm_symbol(ctx.args[0])
    chat_id = update.effective_chat.id
    key = ns_key(pair, chat_id)
    box = ctx.application.bot_data.get(key, {})

    # –î–≤–∏–∂–æ–∫ –≤ –∫–∞–∂–¥–æ–º —Ü–∏–∫–ª–µ –∫–ª–∞–¥—ë—Ç "status_line" (—Å–º. _update_status_snapshot)
    line = box.get("status_line")
    if not line:
        running = is_scanner_running(ctx.application, pair, chat_id)
        hint = "–°–∫–∞–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω." if not running else "–ò–¥—ë—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è‚Ä¶ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ."
        await update.message.reply_text(f"‚ÑπÔ∏è {hint}", parse_mode=constants.ParseMode.HTML)
        return

    await update.message.reply_text(line, parse_mode=constants.ParseMode.HTML)

async def cmd_open(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if len(ctx.args) < 2:
        await update.message.reply_text(
            "–§–æ—Ä–º–∞—Ç: /open <PAIR> long|short [leverage] [steps]\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/open EURUSD long 200 5</code>",
            parse_mode=constants.ParseMode.HTML
        )
        return

    pair = _norm_symbol(ctx.args[0])
    side = (ctx.args[1] or "").upper()
    if side not in ("LONG", "SHORT"):
        await update.message.reply_text("–í—Ç–æ—Ä–∞—è –ø–æ–∑–∏—Ü–∏—è ‚Äî —Å—Ç–æ—Ä–æ–Ω–∞: long –∏–ª–∏ short", parse_mode=constants.ParseMode.HTML)
        return

    lev = None
    steps = None
    if len(ctx.args) >= 3:
        try: lev = int(ctx.args[2])
        except: lev = None
    if len(ctx.args) >= 4:
        try: steps = int(ctx.args[3])
        except: steps = None

    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ –∫–æ–Ω—Ñ–∏–≥—É
    if lev is not None:
        lev = max(CONFIG.MIN_LEVERAGE, min(CONFIG.MAX_LEVERAGE, lev))
    if steps is not None:
        steps = max(1, min(CONFIG.DCA_LEVELS, steps))

    chat_id = update.effective_chat.id
    box = slot_for(ctx.application, pair, chat_id)

    if box.get("position"):
        await update.message.reply_text("–£–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ —ç—Ç–æ–π –ø–∞—Ä–µ. –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä–æ–π—Ç–µ (/close <PAIR>).")
        return

    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–∫–∞–Ω–µ—Ä
    if not is_scanner_running(ctx.application, pair, chat_id):
        await start_scanner_for_pair(ctx.application, broadcast, symbol=pair, chat_id=chat_id, botbox=ctx.application.bot_data)
        await asyncio.sleep(0.3)

    box["manual_open"] = {"side": side, "leverage": lev, "max_steps": steps}
    box["bot_on"] = True

    lev_txt = f"(–ø–ª–µ—á–æ: {lev}) " if lev else ""
    steps_txt = f"(–º–∞–∫—Å. —à–∞–≥–æ–≤: {steps})" if steps else ""
    await update.message.reply_text(
        f"–û–∫, –æ—Ç–∫—Ä—ã–≤–∞—é {side} –ø–æ <b>{pair}</b> –ø–æ —Ä—ã–Ω–∫—É. {lev_txt}{steps_txt}",
        parse_mode=constants.ParseMode.HTML
    )

async def cmd_close(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not ctx.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /close <PAIR>\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/close EURUSD</code>", parse_mode=constants.ParseMode.HTML)
        return
    pair = _norm_symbol(ctx.args[0])
    chat_id = update.effective_chat.id
    box = slot_for(ctx.application, pair, chat_id)

    if not box.get("position"):
        await update.message.reply_text("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —ç—Ç–æ–π –ø–∞—Ä–µ –Ω–µ—Ç.")
        return

    # –µ—Å–ª–∏ —Å–∫–∞–Ω–µ—Ä –Ω–µ –±–µ–∂–∏—Ç ‚Äî –ø–æ–¥–Ω–∏–º–µ–º, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫—Ä—ã—Ç–∏–µ
    if not is_scanner_running(ctx.application, pair, chat_id):
        await start_scanner_for_pair(ctx.application, broadcast, symbol=pair, chat_id=chat_id, botbox=ctx.application.bot_data)
        await asyncio.sleep(0.3)

    box["force_close"] = True
    await update.message.reply_text(f"üß∞ –ó–∞–ø—Ä–æ—à–µ–Ω–æ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ <b>{pair}</b>. –ó–∞–∫—Ä–æ—é –≤ –±–ª–∏–∂–∞–π—à–µ–º —Ü–∏–∫–ª–µ.",
                                    parse_mode=constants.ParseMode.HTML)

async def cmd_setbank(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if len(ctx.args) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /setbank <PAIR> <AMOUNT>\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/setbank EURUSD 1200</code>",
                                        parse_mode=constants.ParseMode.HTML)
        return
    pair = _norm_symbol(ctx.args[0])
    try:
        val = float(ctx.args[1])
        assert val > 0
    except Exception:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (> 0).")
        return

    chat_id = update.effective_chat.id
    box = slot_for(ctx.application, pair, chat_id)
    box["safety_bank_usdt"] = val
    await update.message.reply_text(f"üí∞ –ë–∞–Ω–∫ –¥–ª—è <b>{pair}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {val:.2f} USD", parse_mode=constants.ParseMode.HTML)

# === Entrypoint ===

if __name__ == "__main__":
    persistence = PicklePersistence(filepath="bot_persistence")
    app = ApplicationBuilder() \
        .token(BOT_TOKEN) \
        .persistence(persistence) \
        .post_init(post_init) \
        .build()

    app.add_error_handler(on_error)

    app.add_handler(CommandHandler("start",   cmd_start))
    app.add_handler(CommandHandler("mychatid",cmd_mychatid))
    app.add_handler(CommandHandler("run",     cmd_run))
    app.add_handler(CommandHandler("stop",    cmd_stop))
    app.add_handler(CommandHandler("status",  cmd_status))
    app.add_handler(CommandHandler("open",    cmd_open))
    app.add_handler(CommandHandler("close",   cmd_close))
    app.add_handler(CommandHandler("setbank", cmd_setbank))

    log.info(f"Bot {BOT_VERSION} starting...")
    app.run_polling()
